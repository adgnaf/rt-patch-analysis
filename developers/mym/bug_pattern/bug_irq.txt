
grep -A 1 -E "C::bug::[^:]*::irq::" ./history.org  >bug_irq.txt

* [2.6.22         ] acpi-move-timer-broadcast-and-pmtimer-access-before-c3-arbiter-shutdown.patch {C::bug::hwerr::irq::hardware::check ARB_DIS status before reading from ICH deivce}
  + [[file:2.6.22/acpi-move-timer-broadcast-and-pmtimer-access-before-c3-arbiter-shutdown.patch][2.6.22]]  {MOD::drivers/acpi}
硬件问题？
--

* [2.6.22 - 2.6.23] preempt-rt-cs5530-lock-ide-fix.patch{C::bug::hang::irq::irq::replace spin_lock_riqsave/irqrestore to local_irq_save/restore}
  + [[file:2.6.22/preempt-rt-cs5530-lock-ide-fix.patch][2.6.22]] {MOD::drivers/ide}
将spin_lock_irqsave换成了local_irq_save，意思是说不需要锁了，只需要关中断就可以了。
why?是因为这段代码只会在中断处理程序里面执行吗？因此只需要关中断就可以了？那为何变成了bug?
spin_lock_irqsave也是可以关中断的吗？是不是不好关中断？
--



* [2.6.22 - 2.6.26] preempt-irqs-ppc-fix-b6.patch {C::bug::crash::irq::irq::set soft/hard enable}
  + [[file:2.6.22/preempt-irqs-ppc-fix-b6.patch][2.6.22]]

  这里了有了call stack应该确定无疑是bug
scheduling with irqs disabled
在关中断的时候，执行了schedule因此报错。
解决方法：enable soft/hard irq,然后就可以执行schedule了。
--
* [2.6.22 - 2.6.29] move: native irq {C::bug::irq::irq::irq::add init and check}
  + [[file:2.6.22/move-native-irq.patch][2.6.22]]
--
* [2.6.22 - 2.6.29] patches/ioapic-fix-too-fast-clocks.patch {C::bug::irq::irq::irq::add upper bound check to avoid clocks to go too fast}
  + [[file:2.6.22/ioapic-fix-too-fast-clocks.patch][2.6.22]]
--
* [2.6.23 - 2.6.24] RT: fix spin_trylock_irq {C::bug::hang::irq::irq::use _spin_trylock_irq() instead of __spin_trylock_irq()}
  + [[file:2.6.23/fix-PICK_FUNCTION-spin_trylock_irq.patch][2.6.23]]

  This patch fixes a bug in spin_trylock_irq() where __spin_trylock_irq() is
picked for regular (non-raw) spinlocks instead of _spin_trylock_irq().

  This results in systematic boot hangs and may have been going unnoticed
for quite some time as it only manifests (aside from a compile warning) when
booting with a NUMA config or when using the Chelsio T3 (cxgb3) driver as
these seems to be the sole users.

使用__spin_trylock_irq代替_spin_trylock_irq  
  
--
* [2.6.23 - 2.6.29] genirq: fix simple and fasteoi irq handlers {C::bug::hwerr::irq::irq::fix an IRQ handling error}
  + [[file:2.6.23/irq-mask-fix.patch][2.6.23]]
--
* [2.6.23 - 2.6.29] release quicklist before free_page {C::bug::crash::irq::irq::use per_cpu_locked}
  + [[file:2.6.23/quicklist-release-before-free-page.patch][2.6.23]]
此处不属于irq bug吧？
--



* [2.6.23 -   4.11] infiniband: Mellanox IB driver patch use _nort() primitives {C::bug::crash::irq::irq::use _nort primitives}
  + [[file:2.6.23/preempt-realtime-mellanox-driver-fix.patch][2.6.23]]
  
"Basically, if you just make spin_lock_irqsave (and spin_lock_irq) not disable
interrupts for non-raw spinlocks, I think all of infiniband will be fine without
changes."

-	local_irq_save(flags);
+	local_irq_save_nort(flags);
语义错误  
--
* [2.6.24         ] kvm: check need_resched() inside the irq disabled region {C::bug::rtlatency::irq::irq::check need_resched() inside the irq_disabled region}
  + [[file:2.6.24/kvm-fix-preemption-bug.patch][2.6.24]]
  

check need_resched() inside the irq disabled region

The missing need_resched() check inside the irq_disabled region can cause
long latencies, if a interrupt with reschedule request happens between 
preempt_disable() and the local_irq_disable(). In fact the interrupts are
disabled inside prepare_guest_switch(), so the race window is rather small.
  
 	local_irq_disable();
 
+	if (need_resched()) {
+		local_irq_enable();
+		preempt_enable();
+		r = 1;
+		goto out;
+	}
+
 	if (signal_pending(current)) {
 		local_irq_enable();
 		preempt_enable();  
  
  
--
* [2.6.24         ] Revert Softdisable for simple irqs. {C::bug::irq::irq::irq::reverts the masking in the simple handler}
  + [[file:2.6.24/revert-handle-simple-irq-soft-disable.patch][2.6.24]]
  
  
But the issue
that was uncovered was that the simple handler should never mask.

handle_simple_irq 这个API容易出错  
和+ [[file:2.6.23/irq-mask-fix.patch][2.6.23]]这个patch是相关的。  
--
* [2.6.24 - 2.6.25] Use real time pcp locking for page draining during cpu unplug {C::bug::crash::irq::mutex::use real time pcp locking for page draining during cpu unplug}
  + [[file:2.6.24/page-alloc-use-real-time-pcp-locking-for-page-draining.patch][2.6.24]]
  
  
-		local_irq_disable();
+		unsigned long flags;
+		__lock_cpu_pcp(&flags, cpu);
 		__drain_pages(cpu);
 		vm_events_fold_cpu(cpu);
-		local_irq_enable();
+		unlock_cpu_pcp(flags, cpu);

使用__lock_cpu_pcp代替local_irq_disable  
  
--
* [2.6.24 - 2.6.29] handle IRQ_PENDING for simple irq handler {C::bug::irq::irq::irq::handle IRQ_PENDING for simple irq handler}
  + [[file:2.6.24/handle-pending-in-simple-irq.patch][2.6.24]]
  
  thread_simple_irq这个API里面能会丢失pending的中断。
  什么是simple irq 是否有相关的其他patch
  
--
* [2.6.24 - 2.6.29] [AT91: PATCH]: Use edge triggered interrupt handling for AT91-GPIO instead of si {C::bug::hwerr::irq::irq::use edge triggered interrupt handling for at91-gpio instead of simple_irq-handler}
  + [[file:2.6.24/use-edge-triggered-irq-handler-instead-of-simple-irq.patch][2.6.24]]
  
  simple_irq()
  handle_simple_irq() mechanism
  
  * The RT kernels has a problem that the interrupt get masked forever while
the interrupt thread is running and a new interrupt arrives. 
In the interrupt threads there is masking done in the handle_simple_irq()
path, while a simple_irq typically cannot be masked.
  会导致中断丢失
  
--
* [2.6.26         ]preempt-irqs-m68knommu-make-timer-interrupt-non-threaded.patch{C::bug::hwerr::irq::hardware::m68knommu: make timer interrupt non threaded}
  + [[file:2.6.26/preempt-irqs-m68knommu-make-timer-interrupt-non-threaded.patch][2.6.26]]

时钟中断不能线程化IRQF_NODELAY表示不能线程化

 static struct irqaction pit_irq = {
 	.name	 = "timer",
-	.flags	 = IRQF_DISABLED | IRQF_TIMER,
+	.flags	 = IRQF_DISABLED | IRQF_TIMER | IRQF_NODELAY,
 	.handler = pit_tick,
 };
 
  
--
* [2.6.26         ] trace-do-not-wakeup-when-irqs-disabled.patch {C::bug::deadlock::irq::irq::trace do not wakeup when irqs disabled in the PREEMPT_RT case.}
  + [[file:2.6.26/trace-do-not-wakeup-when-irqs-disabled.patch][2.6.26]]
  
  When PREEMPT_RT is enabled then the wakeup code (including the tracer)
can be called with interrupts disabled which triggers the might sleep
check in rt_spin_lock_fastlock(). Do not call wakeup when interrupts
are disabled in the PREEMPT_RT case.

-		wake_up(&trace_wait);
+#ifdef CONFIG_PREEMPT_RT
+		if (!irqs_disabled())
+#endif
+			wake_up(&trace_wait);

在PREEMPT_RT情况下，不能在irq disable的时候，调用wake_up
否则会触发might_sleep check
  
--
* [2.6.26         ] idle-fix.patch{C::bug::hwerr::irq::hardware::nohz: prevent tick stop outside of the idle loop}
  + [[file:2.6.26/idle-fix.patch][2.6.26]]
  
      The interrupts can happen at any point inside the race window. The
    first interrupt stops the tick, the second one causes the scheduler to
    rerun and switch away from idle again and we end up with the tick
    disabled.
    
    The fact that it needs two interrupts where the first one does not set
    NEED_RESCHED and the second one does made the bug obscure and extremly
    hard to reproduce and analyse. Kudos to Jack and Eric.
    
    Solution: Limit the NOHZ functionality to the idle loop to make sure
    that we can not run into such a situation ever again.
	
	时钟中断相关，时钟中断有可能关闭了以后，在也无法开启了。
  * Called either from the idle loop or from irq_exit() when an idle period was
  * just interrupted by an interrupt which did not cause a reschedule.
  */
-void tick_nohz_stop_sched_tick(void)
+void tick_nohz_stop_sched_tick(int inidle)

-		tick_nohz_stop_sched_tick();
+		tick_nohz_stop_sched_tick(1);
给函数增加了一个标志位，如果idle loop里面则可以开启NOHZ，即只有在idle loop里面才能开启NOHZ
也就是说关闭tick来节能。（因为调度了idle loop来执行，说明系统里面负载很低，或者干脆没有任务可以执行）
如果在idle loop外面开启NOHZ,则会把时钟中断关闭了，导致死机了。
	
  
--
* [2.6.26         ] fix-a-previously-reverted-fix.patch {C::bug::hang::irq::irq::preempt_schedule_irq}
  + [[file:2.6.26/fix-a-previously-reverted-fix.patch][2.6.26]]
  和powerpc和preempt_schedule_irq() api有关,没有看懂
--
* [2.6.26 -    3.8] generic-cmpxchg-use-raw-local-irq-variant.patch {C::bug::hwerr::irq::hardware::generic: Use raw local irq variant for generic cmpxchg}
  + [[file:2.6.26/generic-cmpxchg-use-raw-local-irq-variant.patch][2.6.26]]
  

-	local_irq_save(flags);
+	raw_local_irq_save(flags);

api替换，语义bug  
  
--
* [2.6.29         ] remove one extra (incorrect) test in mask_ack_irq(){C::bug::hwerr::irq::irq::remove one extra (incorrect) test in mask_ack_irq()}
  + [[file:2.6.29/preempt-irqs-core-fix.patch][2.6.29]]
  
  mask_ack_irq相关
  preempt-irqs-core.patch引入的bug
  
--
* [2.6.29         ] x86: fix sparse irq vector{C::bug::hwerr::irq::irq:: fix sparse irq vector}
  + [[file:2.6.29/x86-vector-sparse-irq-fix.patch][2.6.29]]
  变成逻辑错误，如果某个cfg_new->vector != 0 则跳过本次循环
--
* [2.6.29         ] rt: res_counter fix{C::bug::hwerr::irq::irq::replace local_irq_save with local_irq_save_nort}
  + [[file:2.6.29/rt-res_counter-fix.patch][2.6.29]]
有call stack ，出现了might_sleep
替换api  
-	local_irq_save(flags);
+	local_irq_save_nort(flags);
--
* [2.6.29         ] rt: irq handle.c fix2{C::bug::hwerr::irq::irq::direct-keyboard-sparseirq-fix}
  + [[file:2.6.29/preempt-realtime-direct-keyboard-sparseirq-fix.patch][2.6.29]]
  
  revert 类型的
  fold back to mingo-rt-irq-handle.c-fix.patch
--
* [2.6.29         ] irq threading: fix PF_HARDIRQ definition{C::bug::hwerr::irq::irq:: fix PF_HARDIRQ macro t}
  + [[file:2.6.29/blkcypher-fix.patch][2.6.29]]

  
有call stack 
-#define PF_HARDIRQ	0x08000020	/* hardirq context */  
+#define PF_HARDIRQ	0x00000080	/* hardirq context */

  #define in_irq()        (hardirq_count() || (current->flags & PF_HARDIRQ))
  
          if (WARN_ON_ONCE(in_irq()))
                return -EDEADLK;
出错出在了in_irq宏定义的结果错误。				
				
--
* [2.6.29 -    3.4] timers: fix timer hotplug on -rt{C::bug::hwerr::irq::irq::in the CPU_DEAD notifier, must not sleep nor enable interrupts.}
  + [[file:2.6.29/preempt-realtime-timer-cpu-hotplug-fix.patch][2.6.29]]
  
  API替换
  
  把spin_lock_irq
  替换成了local_irq_save
  说是不能睡眠和开启中断。
--
* [2.6.29 -   4.11] ata: Do not disable interrupts in ide code for preempt-rt{C::bug::hwerr::irq::irq:: Do not disable interrupts in ide code for preempt-rt}
  + [[file:2.6.29/ata-irq-save-nort.patch][2.6.29]]
  
  API替换
-	local_irq_save(flags);
+	local_irq_save_nort(flags);

--
* [   3.0 -    3.2] x86-32-fix-signal-crap.patch{C::bug::crash::irq::irq::add irqenable}
  + [[file:3.0/x86-32-fix-signal-crap.patch][3.0]]

增加了ENABLE_INTERRUPTS
 
+	TRACE_IRQS_ON
+	ENABLE_INTERRUPTS(CLBR_NONE)
 	call do_notify_resume
+	DISABLE_INTERRUPTS(CLBR_ANY)
+	TRACE_IRQS_OFF

  
--
* [   3.0 -    3.6] drivers: net: ehea: Make rx irq handler non-threaded (IRQF_NO_THREAD){C::bug::hang::irq::irq::make irq no thread}
  + [[file:3.0/drivers-net-ehea-mark-rx-irq-no-thread.patch][3.0]]
  
  
不能中断线程化。  
会中断丢失
 外部中断边沿触发和电平触发的区别
 
 以单片机引脚输入中断为例:
边沿触发，只会在电平变化时出现一次中断。
电平触发，只要电平为触发电平，会一直触发中断，即使清零了，还会再次

电平触发是在高或低电平保持的时间内触发,
而边沿触发是由高到低或由低到高这一瞬间触发
追问：
我总觉得都是在电平为某一值是而触发的。那边沿触发到底解决了电平触发哪点没有解决的问题呢？
追答：
边沿触发一般时间短,边沿触发一般时间都是us级的,响应要快的,而电平触发只须是高和低就可以了,没时间要求,比如10s 时间内总是低电平,那么它也是触发的,
比如中断计时或计数,最好用边沿触发,用电平触发误差会很大,电平触发一般用于简单报警,开关一类(时间要求不高的)



如果是下降沿触发，当从高至低电平转变时，触发产生；低电平保持多久都只产生一次。所以，边沿触发适合与以负脉冲形式输入的外部中断请求。
    如果是低电平触发，那么在低电平时间内中断一直有效；因此如果在电平没有恢复之前中断程序就已经执行完成从而退出，那么会在退出后又再次进入中断；但只要中断没有退出是不会重复触发的。所以，电平触发方式适合于外部中断以低电平输入而且中断服务能清除外部中断源的情况（实际中通常采用这样的做法：在中断退出前关闭中断，等后面恰当时机再打开）。
    解释二：电平触发方式是按照电平的高或者低来触发，所以用的时候，必须在发生触发事件后立即将电平拉到非触发电平上，如果不这样做的话，会导致程序一直在触发事件程序入口处，而不会执行其他地方的程序。所以一般比较少用。
    边沿触发方式是按照（上或下）边沿触发事件，由于触发的条件是边沿（上或下），所以即使在触发事件后，保存原来的电平都没有关系，不会一直在触发的，一般都用这种方式。
    脉冲触发有两种：边沿触发和电平触发
    边沿触发分上升沿触发和下降沿触发，简单说就是电平变化那一瞬间进行触发。
    电平触发也有高电平触发、低电平触发，一般都是低电平触发。如果是低电平触发，那么在低电平时间内中断一直有效。
    如果在电平没有恢复之前就退出中断程序，那么会在退出后又再次进入中断。只要不退出是不会重复触发的。
	
  
The underlying hardware is edge triggered but presented by XICS as level
triggered. The edge triggered interrupts are not reissued after masking. This
is not a problem in mainline which does not mask the interrupt (relying on the
EOI mechanism instead). The threaded interrupts in PREEMPT_RT do mask the
interrupt, and can lose interrupts that occurred while masked, resulting in a
hung ethernet interface.



--
* [   3.0 -    3.6] tty: Do not disable interrupts in put_ldisc on -rt{C::bug::crash::irq::irq::add nort to irq_save}
  + [[file:3.0/tty-use-local-irq-nort.patch][3.0]]

有call stack 显示调用了mightsleep  
  API替换
-	local_irq_save(flags);
+	local_irq_save_nort(flags);
--
* [   3.0 -   3.18] core: Do not disable interrupts on RT in res_counter.c{C::bug::crash::irq::irq::replace with nort}
  + [[file:3.0/resource-counters-use-localirq-nort.patch][3.0]]

有call stack 显示调用了mightsleep  
  API替换  
-	local_irq_save(flags);
+	local_irq_save_nort(flags);
  
--
* [   3.0 -    4.6] timers: Avoid the switch timers base set to NULL trick on RT{C::bug::crash::irq::semantics::try new lock first to avoid return NULL}
  + [[file:3.0/timers-avoid-the-base-null-otptimization-on-rt.patch][3.0]]
--
* [   3.0 -   4.11] suspend: Prevent might sleep splats{C::bug::crash::irq::semantics::not a fixup, but a way to block mightsleep warning}
  + [[file:3.0/suspend-prevernt-might-sleep-splats.patch][3.0]]
--
* [   3.0 -   4.11] fs: ntfs: disable interrupt only on !RT{C::bug::crash::irq::irq::replace with nort}
  + [[file:3.0/fs-ntfs-disable-interrupt-non-rt.patch][3.0]]
  
disable interrupt only on !RT
只在非rt环境下面才会disable irq
也就是local_irq_save_nort这个api的含义了？
-		local_irq_save(flags);
+		local_irq_save_nort(flags);

  
--
* [   3.0 -   4.11] drivers/net: vortex fix locking issues{C::bug::deadlock::irq::irq::replace with _nort}
  + [[file:3.0/drivers-net-vortex-fix-locking-issues.patch][3.0]]
  
需要关闭irq  
-	local_irq_save(flags);
+	local_irq_save_nort(flags);
  
--
* [   3.2         ] x86: Call idle notifier after irq_enter(){C::bug::crash::irq::order::call irq_enter first}
  + [[file:3.2/x86_64-patch-for-idle-notifiers.patch][3.2]]

没太看懂  
-	exit_idle();
 	irq_enter();
+	exit_idle();

--
* [   3.2 -   4.11] tasklet: Prevent tasklets from going into infinite spin in RT{C::bug::hang::irq::irq::new impl of softirq}
  + [[file:3.2/tasklet-rt-prevent-tasklets-from-going-into-infinite-spin-in-rt.patch][3.2]]
  
  很重要但是没有看懂：
  When CONFIG_PREEMPT_RT_FULL is enabled, tasklets run as threads,
and spinlocks turn are mutexes. But this can cause issues with
tasks disabling tasklets. A tasklet runs under ksoftirqd, and
if a tasklets are disabled with tasklet_disable(), the tasklet
count is increased. When a tasklet runs, it checks this counter
and if it is set, it adds itself back on the softirq queue and
returns.

  
--
* [   3.6         ] mm: Protect activate_mm() by preempt_[disable%7Cenable]_rt(){C::bug::crash::irq::irq::replace with preempt pair}
  + [[file:3.6/mm-protect-activate_mm-by-preempt_-disable-7cenable-_rt.patch][3.6]]

有call stack
The reason is that ARM need irq enabled when doing activate_mm().
According to mm-protect-activate-switch-mm.patch, actually
preempt_[disable|enable]_rt() is sufficient.
  
  
有api替换，需要打开irq
  
-	local_irq_disable_rt();
+	preempt_disable_rt();  
  
--
* [   3.6 -   3.10] rcu: rcutiny: Prevent RCU stall{C::bug::data_err::irq::semantics::modify check}
  + [[file:3.6/rcu-tiny-solve-rt-mistery.patch][3.6]]
  
  很重要的语义变化。
  On RT  softirq processing context can be preempted
  on mainline softirq processing context cannot be preempted

 	/* Hardware IRQ handlers cannot block. */
-	if (in_irq() || in_serving_softirq()) {
+	if (preempt_count() & (HARDIRQ_MASK | SOFTIRQ_OFFSET)) {
 		local_irq_restore(flags);
 		return;
 	}
	
  
--
* [   3.6 -   4.11] scsi: qla2xxx: Use local_irq_save_nort() in qla2x00_poll{C::bug::crash::irq::irq::replace with nort}
  + [[file:3.6/scsi-qla2xxx-fix-bug-sleeping-function-called-from-invalid-context.patch][3.6]]

   很重要：
   Function qla2x00_poll does local_irq_save() before calling qla24xx_intr_handler
which has a spinlock. Since spinlocks are sleepable on rt, it is not allowed
to call them with interrupts disabled. Therefore we use local_irq_save_nort()
instead which saves flags without disabling interrupts.

说是rt下面的spinlock可以睡眠？然后不能在irq disable的情况下面调用spin_lock

-	local_irq_save(flags);
+	local_irq_save_nort(flags);

local_irq_save_nort 不会关闭irq,因此再调用spin_lock就可以睡眠了。

  
--
* [   3.8 -   4.11] rcu: Disable RCU_FAST_NO_HZ on RT{C::bug::hwerr::irq::irq::rcu: Disable RCU_FAST_NO_HZ on RT}
  + [[file:3.8/rcu-disable-rcu-fast-no-hz-on-rt.patch][3.8]]
--
* [   3.8 -   4.11] slub: Enable irqs for __GFP_WAIT{C::bug::hwerr::irq::irq::slub: Enable irqs for __GFP_WAIT}
  + [[file:3.8/slub-enable-irqs-for-no-wait.patch][3.8]]
  和内存分配是否可以睡眠有关？没有看懂
--
* [   3.8 -   4.11] tty/serial/pl011: Make the locking work on RT{C::bug::hwerr::irq::irq::Redo it to make it work on -RT and non-RT.}
  + [[file:3.8/drivers-tty-pl011-irq-disable-madness.patch][3.8]]
--
* [  3.10 -   4.11] rt,ntp: Move call to schedule_delayed_work() to helper thread{C::bug::deadlock::irq::semantics::rt,ntp: Move call to schedule_delayed_work() to helper thread}
  + [[file:3.10/move_sched_delayed_work_to_helper.patch][3.10]]
  
  
schedule_delayed_work()会调用spinlock  
calling schedule_delayed_work()from interrupt is not safe，需要启动一个内核线程，在线程上下文里面来执行这个函数。
  
说是内核里面应该还有同类型的错误没有被发现：
The ntp code for notify_cmos_timer() is called from a hard interrupt
context. schedule_delayed_work() under PREEMPT_RT_FULL calls spinlocks
that have been converted to mutexes, thus calling schedule_delayed_work()
from interrupt is not safe.

Add a helper thread that does the call to schedule_delayed_work and wake
up that thread instead of calling schedule_delayed_work() directly.
This is only for CONFIG_PREEMPT_RT_FULL, otherwise the code still calls
schedule_delayed_work() directly in irq context.

Note: There's a few places in the kernel that do this. Perhaps the RT
code should have a dedicated thread that does the checks. Just register
a notifier on boot up for your check and wake up the thread when
needed. This will be a todo.


  
--
* [  3.12         ] Kind of revert "powerpc: 52xx: provide a default in mpc52xx_irqhost_map()"{C::bug::hwerr::irq::irq:: Kind of revert "powerpc: 52xx: provide a default in mpc52xx_irqhost_map()"}
  + [[file:3.12/Kind-of-revert-powerpc-52xx-provide-a-default-in-mpc.patch][3.12]]
--
* [  3.12         ] drm: remove preempt_disable() from drm_calc_vbltimestamp_from_scanoutpos(){C::bug::deadlock::irq::irq::drm: remove preempt_disable() from drm_calc_vbltimestamp_from_scanoutpos()}
  + [[file:3.12/drm-remove-preempt_disable-from-drm_calc_vbltimestam.patch][3.12]]

有call stack，显示的是 
| BUG: sleeping function called from invalid context at kernel/rtmutex.c:659
| in_atomic(): 1, irqs_disabled(): 0, pid: 517, name: Xorg

在中断关闭的情况下面，调用了sleep相关的函数（是不是通过spin_lock间接调用了睡眠的函数？）。
 
解决方法是去掉了下面的函数调用。 
- preempt_disable();
  
  
--
* [  3.12 -   4.11] hrtimer: Move schedule_work call to helper thread{C::bug::deadlock::irq::irq::hrtimer: Move schedule_work call to helper thread}
  + [[file:3.12/hrtimer-Move-schedule_work-call-to-helper-thread.patch][3.12]]

有call stack

The clock_was_set_delayed is called in hard IRQ handler (timer interrupt), which
calls schedule_work.

Under PREEMPT_RT_FULL, schedule_work calls spinlocks which could sleep, so it's
not safe to call schedule_work in interrupt context.

Reference upstream commit b68d61c705ef02384c0538b8d9374545097899ca
(rt,ntp: Move call to schedule_delayed_work() to helper thread)
from git://git.kernel.org/pub/scm/linux/kernel/git/rt/linux-stable-rt.git, which
makes a similar change.

add a helper thread which does the call to schedule_work and wake up that
thread instead of calling schedule_work directly.


在PREEMPT_RT_FULL环境下，schedule_work会调用spinlock，然后spinlock会引起睡眠（这里睡眠是不是优先级继承导致的睡眠？）
所以在中断上下文件里面调用schedule_work会不安全。

上面有类似的bug,解决方法也是将会睡眠的函数放到一个内核线程里面去执行。

--
* [  3.14 -    4.0] irq_work: allow certain work in hard irq context{C::bug::data_err::irq::irq::irq_work: allow certain work in hard irq context}
  + [[file:3.14/irq_work-allow-certain-work-in-hard-irq-context.patch][3.14]]
  
irq_work is processed in softirq context on -RT because we want to avoid
long latencies which might arise from processing lots of perf events.

  
--
* [  3.14 -   4.11] rcutree/rcu_bh_qs: Disable irq while calling rcu_preempt_qs(){C::bug::hang::irq::irq::rcutree/rcu_bh_qs: Disable irq while calling rcu_preempt_qs()}
  + [[file:3.14/rcutree-rcu_bh_qs-disable-irq-while-calling-rcu_pree.patch][3.14]]
  
Any callers to the function rcu_preempt_qs() must disable irqs in
order to protect the assignment to ->rcu_read_unlock_special.

增加了
local_irq_save(flags);
  
  
--
* [  3.14 -   4.11] percpu_ida: Use local locks{C::bug::data_err::irq::irq::percpu_ida: Use local locks}
  + [[file:3.14/percpu_ida-use-locklocks.patch][3.14]]
  
API替换  
the local_irq_save() + spin_lock() does not work that well on -RT

-	local_irq_save(flags);
+	local_lock_irqsave(irq_off_lock, flags);  
--
* [   4.0 -   4.11] powerpc/kvm: Disable in-kernel MPIC emulation for PREEMPT_RT_FULL{C::bug::irq::irq::config::add !PREEMPT_RT_FULL config}
  + [[file:4.0/powerpc-kvm-Disable-in-kernel-MPIC-emulation-for-PRE.patch][4.0]]
--
* [   4.1 -   4.11] irqwork: push most work into softirq context{C::bug::irq::irq::irq::add IRQ_WORK_HARD_IRQ,and push most work into softirq context}
  + [[file:4.1/irqwork-push_most_work_into_softirq_context.patch][4.1]]
--
* [   4.4 -   4.11] irqwork: Move irq safe work to irq context{C::bug::deadlock::irq::irq::Move irq safe work to irq context}
  + [[file:4.4/irqwork-Move-irq-safe-work-to-irq-context.patch][4.4]]
--
* [   4.6 -   4.11] tick/broadcast: Make broadcast hrtimer irqsafe{C::bug::irq::irq::irq::init bctimer.irqsafe}
  + [[file:4.6/tick-broadcast--Make-hrtimer-irqsafe.patch][4.6]]
  
   有callstack没有看懂
--
* [   4.6 -   4.11] ptrace: don't open IRQs in ptrace_freeze_traced() too early{C::bug::crash::irq::irq::add flags parameter to delayed opening interrupt}
  + [[file:4.6/ptrace-don-t-open-IRQs-in-ptrace_freeze_traced-too-e.patch][4.6]]

In the non-RT case the spin_lock_irq() here disables interrupts as well
as raw_spin_lock_irq(). So in the unlock case the interrupts are enabled
too early. 
raw_spin_unlock_irq会无条件的开启中断，此时会带来问题。例如上面提到的，中断开的太早了。
  
-		raw_spin_lock_irq(&task->pi_lock);
+		unsigned long flags;
+
+		raw_spin_lock_irqsave(&task->pi_lock, flags);


-		raw_spin_unlock_irq(&task->pi_lock);
+		raw_spin_unlock_irqrestore(&task->pi_lock, flags);
  
--
* [   4.6 -   4.11] clockevents/drivers/timer-atmel-pit: fix double free_irq{C::bug::irq::irq::irq::add execution condition}
  + [[file:4.6/clockevents-drivers-timer-atmel-pit-fix-double-free_.patch][4.6]]
  
  fix double free_irq
  是一个double free语义bug，其实和irq关系不大？
  
--
* [   4.6 -   4.11] kernel/perf: mark perf_cpu_context's timer as irqsafe{C::bug::crash::irq::irq::set irqsafe to remove warning info}
  + [[file:4.6/kernel-perf-mark-perf_cpu_context-s-timer-as-irqsafe.patch][4.6]]
  
  和上面的tick-broadcast--Make-hrtimer-irqsafe.patch很像
  mark perf_cpu_context's timer as irqsafe

Otherwise we get a WARN_ON() backtrace and some events are reported as
"not counted".
加上了一个flag以后，就没有问题了。
  
--
* [   4.9 -   4.11] net: Have __napi_schedule_irqoff() disable interrupts on {C::bug::crash::irq::irq::add config for RT}
  + [[file:4.9/net-Have-__napi_schedule_irqoff-disable-interrupts-o.patch][4.9]]
