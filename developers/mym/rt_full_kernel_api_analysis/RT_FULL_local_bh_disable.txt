
RT_FULL_local_bh_disable
==============================
通过current->softirq_nestcnt计数来实现。
并且利用了migrate_disable();为啥migrate_disable()可以关闭bottom half?
在RT_FULL情况下，由于中断线程化，softirq和tasklet只能在ksoftirqd内核线程里面执行。因此不需要关闭抢占了。
只需要关于迁移就行了，那这样的话，在ksoftirqd里执行softirq的时候，先local_bh_disable然后再执行softirq对应的函数？



static inline __attribute__((no_instrument_function)) void local_bh_disable(void)
{
 __local_bh_disable();
}

static inline __attribute__((no_instrument_function)) void local_bh_enable(void)
{
 __local_bh_enable();
}

./kernel/softirq.c:585:void __local_bh_disable(void)
./kernel/softirq.c:590:EXPORT_SYMBOL(__local_bh_disable);

void __local_bh_disable(void)
{
        if (++current->softirq_nestcnt == 1)
                migrate_disable();
		//从这里可以看出如果__local_bh_disable第一次被调用的时候，就migrate_disable
		//以后再多次调用的时候，只是记录嵌套的深度，而不会再去调用migrate_disable
}
EXPORT_SYMBOL(__local_bh_disable);

void __local_bh_enable(void)
{
        if (WARN_ON(current->softirq_nestcnt == 0))
                return;

        local_irq_disable();
        if (current->softirq_nestcnt == 1 && current->softirqs_raised)
                do_current_softirqs();
				//如果嵌套深度为1，并且由softirq需要处理则处理？
        local_irq_enable();

        if (--current->softirq_nestcnt == 0)
                migrate_enable();
		//每次调用都会减少嵌套调用的计数，如果减1后为0，则开启迁移
		
}
EXPORT_SYMBOL(__local_bh_enable);
