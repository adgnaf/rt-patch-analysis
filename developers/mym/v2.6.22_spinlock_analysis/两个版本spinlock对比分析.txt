对比分析

对比分析相关的头文件和.c文件的变化。


include/linux/spinlock.h
kernel/rtmutex.c
kernel/spinlock.c
include/linux/rt_lock.h
include/linux/rtmutex.h
include/linux/spinlock_types.h
include/asm-x86_64/spinlock_types.h


include/linux/spinlock_types.h  
include/asm-x86_64/spinlock_types.h 
include/linux/spinlock.h 
kernel/spinlock.c




spinlock_t被替换成了raw_spinlock_t
raw_spinlock_t被替换成了__raw_spin_lockt_t


增加了以下函数：
/*
 * preemptible spin_lock functions:
 */
rt_spin_lock_fastlock(struct rt_mutex *lock,
		void fastcall (*slowfn)(struct rt_mutex *lock))


static inline void
rt_spin_lock_fastunlock(struct rt_mutex *lock,
			void fastcall (*slowfn)(struct rt_mutex *lock))


static void fastcall noinline __sched
rt_spin_lock_slowlock(struct rt_mutex *lock)


static void fastcall noinline __sched
rt_spin_lock_slowunlock(struct rt_mutex *lock)


void __lockfunc rt_spin_lock(spinlock_t *lock)

void __lockfunc __rt_spin_lock(struct rt_mutex *lock)


void __lockfunc rt_spin_unlock(spinlock_t *lock)


void __lockfunc __rt_spin_unlock(struct rt_mutex *lock)









./rt-mutex-core.patch:1585:Index: linux-rt.q/include/linux/spinlock.h
./rt-mutex-core.patch:1587:--- linux-rt.q.orig/include/linux/spinlock.h
./rt-mutex-core.patch:1588:+++ linux-rt.q/include/linux/spinlock.h


./rt-mutex-trylock-export.patch:62:Index: linux-rt.q/include/linux/spinlock.h
./rt-mutex-trylock-export.patch:64:--- linux-rt.q.orig/include/linux/spinlock.h
./rt-mutex-trylock-export.patch:65:+++ linux-rt.q/include/linux/spinlock.h
./write-try-lock-irqsave.patch:2: include/linux/spinlock.h |    7 +++++++
./write-try-lock-irqsave.patch:5:Index: linux-rt.q/include/linux/spinlock.h
./write-try-lock-irqsave.patch:7:--- linux-rt.q.orig/include/linux/spinlock.h
./write-try-lock-irqsave.patch:8:+++ linux-rt.q/include/linux/spinlock.h




./rt-mutex-core.patch
其中的注释信息很详细：
====================================================
+ * Public types and naming conventions:
+ * ------------------------------------
+ * spinlock_t:                         type:  sleep-lock
+ * raw_spinlock_t:                     type:  spin-lock (debug)
+ *
+ * spin_lock([raw_]spinlock_t):                API:   acquire lock, both types
+ *
+ *
+ * Internal types and naming conventions:
+ * -------------------------------------
+ * __raw_spinlock_t:                   type: lowlevel spin-lock
+ *
+ * _spin_lock(struct rt_mutex):                API:  acquire sleep-lock
+ * __spin_lock(raw_spinlock_t):                API:  acquire spin-lock (highlevel)
+ * _raw_spin_lock(raw_spinlock_t):     API:  acquire spin-lock (debug)
+ * __raw_spin_lock(__raw_spinlock_t):  API:  acquire spin-lock (lowlevel)
+ *
+ *
+ * spin_lock(raw_spinlock_t) translates into the following chain of
+ * calls/inlines/macros, if spin-lock debugging is enabled:
+ *
+ *       spin_lock()                   [include/linux/spinlock.h]
+ * ->    __spin_lock()                 [kernel/spinlock.c]
+ *  ->   _raw_spin_lock()              [lib/spinlock_debug.c]
+ *   ->  __raw_spin_lock()             [include/asm/spinlock.h]
+ *
+ * spin_lock(spinlock_t) translates into the following chain of
+ * calls/inlines/macros:
+ *
+ *       spin_lock()                   [include/linux/spinlock.h]
+ * ->    _spin_lock()                  [include/linux/spinlock.h]
+ *  ->   rt_spin_lock()                        [kernel/rtmutex.c]
+ *   ->  rt_spin_lock_fastlock()       [kernel/rtmutex.c]
+ *    -> rt_spin_lock_slowlock()       [kernel/rtmutex.c]


把spin_lock修改成了PICK_OP
-#define spin_lock(lock)                        _spin_lock(lock)
+#define spin_lock(lock)                PICK_OP(_lock, lock)


void unlink_file_vma(struct vm_area_struct *vma)
函数中锁的数据类型分析
vma->vm_file->f_mapping->i_mmap_lock

通过查看address_space结构体定义可以知道，这里的vma->vm_file->f_mapping->i_mmap_lock类型是 spinlock_t
因此spin_lock(vma->vm_file->f_mapping->i_mmap_lock)最终会调用rt_spin_lock


struct address_space (vma->vm_file->f_mapping)

struct address_space {
 struct inode *host;
 struct radix_tree_root page_tree;
 rwlock_t tree_lock;
 unsigned int i_mmap_writable;
 struct prio_tree_root i_mmap;
 struct list_head i_mmap_nonlinear;
 spinlock_t i_mmap_lock;
 unsigned int truncate_count;
 unsigned long nrpages;
 unsigned long writeback_index;
 const struct address_space_operations *a_ops;
 unsigned long flags;
 struct backing_dev_info *backing_dev_info;
 spinlock_t private_lock;
 struct list_head private_list;
 struct address_space *assoc_mapping;
} __attribute__((aligned(sizeof(long))));



