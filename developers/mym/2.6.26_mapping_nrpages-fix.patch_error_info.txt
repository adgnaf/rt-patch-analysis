

第1步：
2.6.26/mapping_nrpages-fix.patch 分析
=================================

-       if (mapping->nrpages)
+       if (mapping_nrpages(mapping))

看到了其主要是将
mapping->nrpages直接通过->结构体成员的访问
替换为了一个通过函数来访问次结构体成员。

但是此patch里面并没有mapping_nrpages这个api的定义


第2步：
===================


由于vanilla 2.6.26 内核里面没有mapping_nrpages这个api

因此我去2.6.26-rt1(vanilla 2.6.26 kernel打上patch-2.6.26-rt1)源代码的目录下面grep -w mapping_nrpages ./* -Rn 
找mapping_nrpages这个api的定义是什么？


通过源代码搜索到了mapping_nrpages这个api


elwin@elwin-MMLP7AP-00:~/rt-test-mym/linux-stable-git/linux-stable$ grep -w mapping_nrpages ./* -Rn | grep inline
./include/linux/fs.h:530:static inline unsigned long mapping_nrpages(struct address_space *mapping)



./include/linux/fs.h内容（打完所有patch）
=========================================
static inline void mapping_nrpages_init(struct address_space *mapping)
{
        mapping->__nrpages = (atomic_long_t)ATOMIC_LONG_INIT(0);
}

static inline unsigned long mapping_nrpages(struct address_space *mapping)
{
        return (unsigned long)atomic_long_read(&mapping->__nrpages);
		//看到了这里有atomic_long_read，因此认为mapping_nrpages这个api的语义是解决原子读问题。
		//因此认为2.6.26/mapping_nrpages-fix.patch 这个patch是一个bugfix，是要fix原子读操作的问题
}

static inline void mapping_nrpages_inc(struct address_space *mapping)
{
        atomic_long_inc(&mapping->__nrpages);
}

static inline void mapping_nrpages_dec(struct address_space *mapping)
{
        atomic_long_dec(&mapping->__nrpages);
}



其实2.6.26/mapping_nrpages-fix.patch 是2.6.26/mapping_nrpages.patch
的继续，其属于重构，没有做任何语义变化。


然后到了2.6.26/mm-concurrent-pagecache.patch 
这个patch里面发现有原子错误然后修复了
2.6.26/mapping_nrpages-fix.patch和2.6.26/mapping_nrpages.patch 这个两个patch的问题。



总结：
================
原因是；原因分特殊。看patch的时候不能仅仅看一个patch。要结合其他patch看。并且还要按照patch先后的提交顺序看。
如果没有做到上面的要求，就会出现问题。


2.6.26/mapping_nrpages-fix.patch 
这个patch正确的分类应该归为重构。


patch-2.6.26-rt1  分析
=========================================
elwin@elwin-MMLP7AP-00:~/rt-test-mym$ grep -w  mapping_nrpages patch-2.6.26-rt1  -n
42292:+ if (mapping_nrpages(mapping) == 0)
49151:+ if (mapping_nrpages(bdev->bd_inode->i_mapping) == 0)
49160:+         ret += mapping_nrpages(bdev->bd_inode->i_mapping);
52025:+static inline unsigned long mapping_nrpages(struct address_space *mapping)
52441:+         .nr_to_write = mapping_nrpages(mapping) * 2,
52450:+ if (mapping_nrpages(mapping)) {
52459:+ if (mapping_nrpages(mapping)) {


patch-2.6.26-rt1  内容
================================
52020 +static inline void mapping_nrpages_init(struct address_space *mapping)
52021 +{
52022 +       mapping->__nrpages = (atomic_long_t)ATOMIC_LONG_INIT(0);
52023 +}
52024 +
52025 +static inline unsigned long mapping_nrpages(struct address_space *mapping)
52026 +{
52027 +       return (unsigned long)atomic_long_read(&mapping->__nrpages);
52028 +}
52029 +
52030 +static inline void mapping_nrpages_inc(struct address_space *mapping)
52031 +{
52032 +       atomic_long_inc(&mapping->__nrpages);
52033 +}
52034 +
52035 +static inline void mapping_nrpages_dec(struct address_space *mapping)
52036 +{
52037 +       atomic_long_dec(&mapping->__nrpages);
52038 +}
52039 +





 
 
2.6.26/mapping_nrpages.patch  
=========================== 
+static inline void mapping_nrpages_init(struct address_space *mapping)
+{
+       mapping->__nrpages = 0;
+}
+
+static inline unsigned long mapping_nrpages(struct address_space *mapping)
+{
+       return mapping->__nrpages;
+}
+
+static inline void mapping_nrpages_inc(struct address_space *mapping)
+{
+       mapping->__nrpages++;
+}
+
+static inline void mapping_nrpages_dec(struct address_space *mapping)
+{
+       mapping->__nrpages--;
+}
+ 



2.6.26/mm-concurrent-pagecache.patch 
分析此处发现了有原子错误，因此修复了下面的api
=======================================
 static inline void mapping_nrpages_init(struct address_space *mapping)
 {
-       mapping->__nrpages = 0;
+       mapping->__nrpages = (atomic_long_t)ATOMIC_LONG_INIT(0);
 }

 static inline unsigned long mapping_nrpages(struct address_space *mapping)
 {
-       return mapping->__nrpages;
+       return (unsigned long)atomic_long_read(&mapping->__nrpages);
 }

 static inline void mapping_nrpages_inc(struct address_space *mapping)
 {
-       mapping->__nrpages++;
+       atomic_long_inc(&mapping->__nrpages);
 }

 static inline void mapping_nrpages_dec(struct address_space *mapping)
 {
-       mapping->__nrpages--;
+       atomic_long_dec(&mapping->__nrpages);
 }
 
 
 