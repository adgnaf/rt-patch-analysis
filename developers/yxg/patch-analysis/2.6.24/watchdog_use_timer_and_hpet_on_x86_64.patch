This modifies nmi_watchdog_tick behavior for 
x86_64 arch to consider both timer and hpet IRQs
just as the i386 arch does.

Signed-off-by: David Bahi <dbahi@novell.com>

---
 arch/x86/kernel/nmi_64.c |    7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

Index: linux-2.6.24-rt1/arch/x86/kernel/nmi_64.c
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/kernel/nmi_64.c	2008-01-25 15:08:01.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/kernel/nmi_64.c	2008-01-25 15:08:21.000000000 -0500
@@ -371,7 +371,6 @@ notrace __kprobes int nmi_watchdog_tick(
 		touched = 1;
 	}
 
-	sum = read_pda(apic_timer_irqs) + read_pda(irq0_irqs);
 	if (__get_cpu_var(nmi_touch)) {
 		__get_cpu_var(nmi_touch) = 0;
 		touched = 1;
@@ -387,6 +386,12 @@ notrace __kprobes int nmi_watchdog_tick(
 		cpu_clear(cpu, backtrace_mask);
 	}
 
+	/*
+	 * Take the local apic timer and PIT/HPET into account. We don't
+	 * know which one is active, when we have highres/dyntick on
+	 */
+	sum = read_pda(apic_timer_irqs) + kstat_cpu(cpu).irqs[0];
+
 #ifdef CONFIG_X86_MCE
 	/* Could check oops_in_progress here too, but it's safer
 	   not too */
