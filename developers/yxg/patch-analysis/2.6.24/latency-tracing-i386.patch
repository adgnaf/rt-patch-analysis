 arch/x86/boot/compressed/Makefile_32 |    2 +-
 arch/x86/kernel/apic_32.c            |    2 ++
 arch/x86/kernel/entry_32.S           |   15 +++++++++++++++
 arch/x86/kernel/irq_32.c             |    5 +++++
 arch/x86/kernel/traps_32.c           |    1 +
 arch/x86/mm/fault_32.c               |    1 +
 include/asm-x86/irq_32.h             |    2 +-
 include/asm-x86/processor_32.h       |    2 +-
 8 files changed, 27 insertions(+), 3 deletions(-)

Index: linux-2.6.24-rt1/arch/x86/boot/compressed/Makefile_32
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/boot/compressed/Makefile_32	2008-01-25 15:06:45.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/boot/compressed/Makefile_32	2008-01-25 15:07:13.000000000 -0500
@@ -11,7 +11,7 @@ EXTRA_AFLAGS	:= -traditional
 LDFLAGS_vmlinux := -T
 hostprogs-y	:= relocs
 
-KBUILD_CFLAGS  := -m32 -D__KERNEL__ $(LINUX_INCLUDE) -O2 \
+KBUILD_CFLAGS  := -m32 -D__KERNEL__ $(LINUX_INCLUDE) -Iinclude -O2 \
 	   -fno-strict-aliasing -fPIC \
 	   $(call cc-option,-ffreestanding) \
 	   $(call cc-option,-fno-stack-protector)
Index: linux-2.6.24-rt1/arch/x86/kernel/apic_32.c
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/kernel/apic_32.c	2008-01-25 15:07:11.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/kernel/apic_32.c	2008-01-25 15:07:13.000000000 -0500
@@ -581,6 +581,8 @@ notrace fastcall void smp_apic_timer_int
 {
 	struct pt_regs *old_regs = set_irq_regs(regs);
 
+	trace_special(regs->eip, 1, 0);
+
 	/*
 	 * NOTE! We'd better ACK the irq immediately,
 	 * because timer handling can be slow.
Index: linux-2.6.24-rt1/arch/x86/kernel/entry_32.S
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/kernel/entry_32.S	2008-01-25 15:06:52.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/kernel/entry_32.S	2008-01-25 15:07:13.000000000 -0500
@@ -352,6 +352,11 @@ sysenter_past_esp:
 	pushl %eax
 	CFI_ADJUST_CFA_OFFSET 4
 	SAVE_ALL
+#ifdef CONFIG_EVENT_TRACE
+	pushl %edx; pushl %ecx; pushl %ebx; pushl %eax
+	call sys_call
+	popl %eax; popl %ebx; popl %ecx; popl %edx
+#endif
 	GET_THREAD_INFO(%ebp)
 
 	/* Note, _TIF_SECCOMP is bit number 8, and so it needs testw and not testb */
@@ -367,6 +372,11 @@ sysenter_past_esp:
 	movl TI_flags(%ebp), %ecx
 	testw $_TIF_ALLWORK_MASK, %cx
 	jne syscall_exit_work
+#ifdef CONFIG_EVENT_TRACE
+	pushl %eax
+	call sys_ret
+	popl %eax
+#endif
 /* if something modifies registers it must also disable sysexit */
 	movl PT_EIP(%esp), %edx
 	movl PT_OLDESP(%esp), %ecx
@@ -390,6 +400,11 @@ ENTRY(system_call)
 	pushl %eax			# save orig_eax
 	CFI_ADJUST_CFA_OFFSET 4
 	SAVE_ALL
+#ifdef CONFIG_EVENT_TRACE
+	pushl %edx; pushl %ecx; pushl %ebx; pushl %eax
+	call sys_call
+	popl %eax; popl %ebx; popl %ecx; popl %edx
+#endif
 	GET_THREAD_INFO(%ebp)
 					# system call tracing in operation / emulation
 	/* Note, _TIF_SECCOMP is bit number 8, and so it needs testw and not testb */
Index: linux-2.6.24-rt1/arch/x86/kernel/irq_32.c
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/kernel/irq_32.c	2008-01-25 15:06:54.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/kernel/irq_32.c	2008-01-25 15:07:13.000000000 -0500
@@ -85,6 +85,11 @@ notrace fastcall unsigned int do_IRQ(str
 
 	old_regs = set_irq_regs(regs);
 	irq_enter();
+#ifdef CONFIG_EVENT_TRACE
+	if (irq == trace_user_trigger_irq)
+		user_trace_start();
+#endif
+	trace_special(regs->eip, irq, 0);
 #ifdef CONFIG_DEBUG_STACKOVERFLOW
 	/* Debugging check for stack overflow: is there less than 1KB free? */
 	{
Index: linux-2.6.24-rt1/arch/x86/kernel/traps_32.c
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/kernel/traps_32.c	2008-01-25 15:06:53.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/kernel/traps_32.c	2008-01-25 15:07:13.000000000 -0500
@@ -237,6 +237,7 @@ show_trace_log_lvl(struct task_struct *t
 {
 	dump_trace(task, regs, stack, &print_trace_ops, log_lvl);
 	printk("%s =======================\n", log_lvl);
+	print_traces(task);
 }
 
 void show_trace(struct task_struct *task, struct pt_regs *regs,
Index: linux-2.6.24-rt1/arch/x86/mm/fault_32.c
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/mm/fault_32.c	2008-01-25 15:06:54.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/mm/fault_32.c	2008-01-25 15:07:13.000000000 -0500
@@ -498,6 +498,7 @@ bad_area_nosemaphore:
 		nr = (address - idt_descr.address) >> 3;
 
 		if (nr == 6) {
+		stop_trace();
 			do_invalid_op(regs, 0);
 			return;
 		}
Index: linux-2.6.24-rt1/include/asm-x86/irq_32.h
===================================================================
--- linux-2.6.24-rt1.orig/include/asm-x86/irq_32.h	2008-01-25 15:06:45.000000000 -0500
+++ linux-2.6.24-rt1/include/asm-x86/irq_32.h	2008-01-25 15:07:13.000000000 -0500
@@ -41,7 +41,7 @@ extern int irqbalance_disable(char *str)
 extern void fixup_irqs(cpumask_t map);
 #endif
 
-unsigned int do_IRQ(struct pt_regs *regs);
+extern fastcall notrace unsigned int do_IRQ(struct pt_regs *regs);
 void init_IRQ(void);
 void __init native_init_IRQ(void);
 
Index: linux-2.6.24-rt1/include/asm-x86/processor_32.h
===================================================================
--- linux-2.6.24-rt1.orig/include/asm-x86/processor_32.h	2008-01-25 15:06:45.000000000 -0500
+++ linux-2.6.24-rt1/include/asm-x86/processor_32.h	2008-01-25 15:07:13.000000000 -0500
@@ -134,7 +134,7 @@ extern void detect_ht(struct cpuinfo_x86
 static inline void detect_ht(struct cpuinfo_x86 *c) {}
 #endif
 
-static inline void native_cpuid(unsigned int *eax, unsigned int *ebx,
+static inline void fastcall native_cpuid(unsigned int *eax, unsigned int *ebx,
 					 unsigned int *ecx, unsigned int *edx)
 {
 	/* ecx is often an input as well as an output. */
