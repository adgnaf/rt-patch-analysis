 arch/x86/ia32/ia32entry.S   |   11 ++++++++-
 arch/x86/kernel/entry_64.S  |    4 +++
 arch/x86/kernel/head64.c    |    1 
 arch/x86/kernel/irq_64.c    |    6 +++++
 arch/x86/kernel/traps_64.c  |    1 
 include/asm-x86/calling.h   |   50 ++++++++++++++++++++++++++++++++++++++++++++
 include/asm-x86/unistd_64.h |    2 +
 7 files changed, 74 insertions(+), 1 deletion(-)

Index: linux-2.6.24-rt1/arch/x86/ia32/ia32entry.S
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/ia32/ia32entry.S	2008-01-25 15:06:45.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/ia32/ia32entry.S	2008-01-25 15:07:13.000000000 -0500
@@ -132,7 +132,9 @@ sysenter_do_call:	
 	cmpl	$(IA32_NR_syscalls-1),%eax
 	ja	ia32_badsys
 	IA32_ARG_FIXUP 1
+	TRACE_SYS_IA32_CALL
 	call	*ia32_sys_call_table(,%rax,8)
+	TRACE_SYS_RET
 	movq	%rax,RAX-ARGOFFSET(%rsp)
 	GET_THREAD_INFO(%r10)
 	cli
@@ -237,7 +239,9 @@ cstar_do_call:	
 	cmpl $IA32_NR_syscalls-1,%eax
 	ja  ia32_badsys
 	IA32_ARG_FIXUP 1
+	TRACE_SYS_IA32_CALL
 	call *ia32_sys_call_table(,%rax,8)
+	TRACE_SYS_RET
 	movq %rax,RAX-ARGOFFSET(%rsp)
 	GET_THREAD_INFO(%r10)
 	cli
@@ -328,8 +332,10 @@ ia32_do_syscall:	
 	cmpl $(IA32_NR_syscalls-1),%eax
 	ja  ia32_badsys
 	IA32_ARG_FIXUP
+	TRACE_SYS_IA32_CALL
 	call *ia32_sys_call_table(,%rax,8) # xxx: rip relative
 ia32_sysret:
+	TRACE_SYS_RET
 	movq %rax,RAX-ARGOFFSET(%rsp)
 	jmp int_ret_from_sys_call 
 
@@ -400,7 +406,7 @@ END(ia32_ptregs_common)
 
 	.section .rodata,"a"
 	.align 8
-ia32_sys_call_table:
+ENTRY(ia32_sys_call_table)
 	.quad sys_restart_syscall
 	.quad sys_exit
 	.quad stub32_fork
@@ -726,4 +732,7 @@ ia32_sys_call_table:
 	.quad compat_sys_timerfd
 	.quad sys_eventfd
 	.quad sys32_fallocate
+#ifdef CONFIG_EVENT_TRACE
+ .globl ia32_syscall_end
+#endif
 ia32_syscall_end:
Index: linux-2.6.24-rt1/arch/x86/kernel/entry_64.S
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/kernel/entry_64.S	2008-01-25 15:06:52.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/kernel/entry_64.S	2008-01-25 15:07:13.000000000 -0500
@@ -267,7 +267,9 @@ ENTRY(system_call)
 	cmpq $__NR_syscall_max,%rax
 	ja badsys
 	movq %r10,%rcx
+	TRACE_SYS_CALL
 	call *sys_call_table(,%rax,8)  # XXX:	 rip relative
+	TRACE_SYS_RET
 	movq %rax,RAX-ARGOFFSET(%rsp)
 /*
  * Syscall return path ending with SYSRET (fast path)
@@ -350,7 +352,9 @@ tracesys:			 
 	cmova %rcx,%rax
 	ja  1f
 	movq %r10,%rcx	/* fixup for C */
+	TRACE_SYS_CALL
 	call *sys_call_table(,%rax,8)
+ 	TRACE_SYS_RET
 1:	movq %rax,RAX-ARGOFFSET(%rsp)
 	/* Use IRET because user could have changed frame */
 		
Index: linux-2.6.24-rt1/arch/x86/kernel/head64.c
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/kernel/head64.c	2008-01-25 15:06:52.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/kernel/head64.c	2008-01-25 15:07:13.000000000 -0500
@@ -10,6 +10,7 @@
 #include <linux/kernel.h>
 #include <linux/string.h>
 #include <linux/percpu.h>
+#include <linux/sched.h>
 
 #include <asm/processor.h>
 #include <asm/proto.h>
Index: linux-2.6.24-rt1/arch/x86/kernel/irq_64.c
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/kernel/irq_64.c	2008-01-25 15:07:12.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/kernel/irq_64.c	2008-01-25 15:07:13.000000000 -0500
@@ -151,6 +151,12 @@ asmlinkage unsigned int do_IRQ(struct pt
 	irq_enter();
 	irq = __get_cpu_var(vector_irq)[vector];
 
+#ifdef CONFIG_EVENT_TRACE
+	if (irq == trace_user_trigger_irq)
+		user_trace_start();
+#endif
+	trace_special(regs->rip, irq, 0);
+
 #ifdef CONFIG_DEBUG_STACKOVERFLOW
 	stack_overflow_check(regs);
 #endif
Index: linux-2.6.24-rt1/arch/x86/kernel/traps_64.c
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/kernel/traps_64.c	2008-01-25 15:06:45.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/kernel/traps_64.c	2008-01-25 15:07:13.000000000 -0500
@@ -350,6 +350,7 @@ show_trace(struct task_struct *tsk, stru
 	printk("\nCall Trace:\n");
 	dump_trace(tsk, regs, stack, &print_trace_ops, NULL);
 	printk("\n");
+	print_traces(tsk);
 }
 
 static void
Index: linux-2.6.24-rt1/include/asm-x86/calling.h
===================================================================
--- linux-2.6.24-rt1.orig/include/asm-x86/calling.h	2008-01-25 15:06:45.000000000 -0500
+++ linux-2.6.24-rt1/include/asm-x86/calling.h	2008-01-25 15:07:13.000000000 -0500
@@ -160,3 +160,53 @@
 	.macro icebp
 	.byte 0xf1
 	.endm
+
+/*
+ * latency-tracing helpers:
+ */
+
+	.macro TRACE_SYS_CALL
+
+#ifdef CONFIG_EVENT_TRACE
+	SAVE_ARGS
+
+	mov     %rdx, %rcx
+	mov     %rsi, %rdx
+	mov     %rdi, %rsi
+	mov     %rax, %rdi
+
+	call sys_call
+
+	RESTORE_ARGS
+#endif
+	.endm
+
+
+	.macro TRACE_SYS_IA32_CALL
+
+#ifdef CONFIG_EVENT_TRACE
+	SAVE_ARGS
+
+	mov     %rdx, %rcx
+	mov     %rsi, %rdx
+	mov     %rdi, %rsi
+	mov     %rax, %rdi
+
+	call sys_ia32_call
+
+	RESTORE_ARGS
+#endif
+	.endm
+
+	.macro TRACE_SYS_RET
+
+#ifdef CONFIG_EVENT_TRACE
+	SAVE_ARGS
+
+	mov     %rax, %rdi
+
+	call sys_ret
+
+	RESTORE_ARGS
+#endif
+	.endm
Index: linux-2.6.24-rt1/include/asm-x86/unistd_64.h
===================================================================
--- linux-2.6.24-rt1.orig/include/asm-x86/unistd_64.h	2008-01-25 15:06:45.000000000 -0500
+++ linux-2.6.24-rt1/include/asm-x86/unistd_64.h	2008-01-25 15:07:13.000000000 -0500
@@ -11,6 +11,8 @@
  * Note: holes are not allowed.
  */
 
+#define NR_syscalls (__NR_syscall_max+1)
+
 /* at least 8 syscall per cacheline */
 #define __NR_read				0
 __SYSCALL(__NR_read, sys_read)
