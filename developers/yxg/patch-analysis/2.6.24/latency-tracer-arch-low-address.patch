From mingo@elte.hu Thu Nov 15 09:13:39 2007
Date: Thu, 15 Nov 2007 11:29:40 +0100
From: Ingo Molnar <mingo@elte.hu>
To: Steven Rostedt <rostedt@goodmis.org>
Subject: [yanmin_zhang@linux.intel.com: Re: aim7 -30% regression in
    2.6.24-rc1]


Steve,

could you please apply the fix below to the -rt latency tracer too? 
Thanks,

	Ingo

----- Forwarded message from "Zhang, Yanmin" <yanmin_zhang@linux.intel.com> -----

Date: Thu, 15 Nov 2007 14:52:01 +0800
From: "Zhang, Yanmin" <yanmin_zhang@linux.intel.com>
To: Ingo Molnar <mingo@elte.hu>
Subject: Re: aim7 -30% regression in 2.6.24-rc1
Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>

On Wed, 2007-11-14 at 11:59 +0100, Ingo Molnar wrote:
> * Zhang, Yanmin <yanmin_zhang@linux.intel.com> wrote:
> 
> > SWIOTLB couldn't get low boot mem. Your patch uses alloc_bootmem to 
> > alloc
> >  1.6GB/4.8GB boot mem. Suggest to use __alloc_bootmem_core with a 
> > higher goal.
> 
> ah, indeed. If you are interested in fixing this then please send me a 
> patch for this bug.

Pls. see below patch. I tested it on my stoakley and tigerton. It's a 
little ugly, but does work.

-yanmin

---


---
 kernel/latency_trace.c |   24 +++++++++++++++++++++---
 1 file changed, 21 insertions(+), 3 deletions(-)

Index: linux-2.6.24-rt1/kernel/latency_trace.c
===================================================================
--- linux-2.6.24-rt1.orig/kernel/latency_trace.c	2008-01-25 15:07:19.000000000 -0500
+++ linux-2.6.24-rt1/kernel/latency_trace.c	2008-01-25 15:08:30.000000000 -0500
@@ -2738,6 +2738,24 @@ void print_traces(struct task_struct *ta
 #endif
 
 #ifdef CONFIG_EVENT_TRACE
+#ifndef	ARCH_LOW_ADDRESS_LIMIT
+#define	ARCH_LOW_ADDRESS_LIMIT  0xffffffffUL
+#endif
+void * __init tracer_alloc_bootmem(unsigned long size)
+{
+	void * ret;
+
+	ret =__alloc_bootmem(size, SMP_CACHE_BYTES, ARCH_LOW_ADDRESS_LIMIT);
+	if (ret != NULL && ((unsigned long)ret) < ARCH_LOW_ADDRESS_LIMIT) {
+		free_bootmem(__pa(ret), size);
+		ret = __alloc_bootmem(size,
+				SMP_CACHE_BYTES,
+				__pa(MAX_DMA_ADDRESS));
+	}
+
+	return ret;
+}
+
 /*
  * Allocate all the per-CPU trace buffers and the
  * save-maximum/save-output staging buffers:
@@ -2755,7 +2773,7 @@ void __init init_tracer(void)
 
 	for_each_possible_cpu(cpu) {
 		tr = cpu_traces + cpu;
-		array = alloc_bootmem(size);
+		array = tracer_alloc_bootmem(size);
 		if (!array) {
 			printk(KERN_ERR
 			"CPU#%d: failed to allocate %ld bytes trace buffer!\n",
@@ -2769,7 +2787,7 @@ void __init init_tracer(void)
 		tr->cpu = cpu;
 		tr->trace = array;
 
-		array = alloc_bootmem(size);
+		array = tracer_alloc_bootmem(size);
 		if (!array) {
 			printk(KERN_ERR
 			"CPU#%d: failed to allocate %ld bytes max-trace buffer!\n",
@@ -2788,7 +2806,7 @@ void __init init_tracer(void)
 	 * trace entries for the first cpu-trace structure:
 	 */
 	size = sizeof(struct trace_entry)*MAX_TRACE*num_possible_cpus();
-	array = alloc_bootmem(size);
+	array = tracer_alloc_bootmem(size);
 	if (!array) {
 		printk(KERN_ERR
 			"failed to allocate %ld bytes out-trace buffer!\n",
