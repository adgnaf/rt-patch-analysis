---
 include/linux/interrupt.h |    6 ++----
 kernel/softirq.c          |   20 ++++++++++++++++++++
 2 files changed, 22 insertions(+), 4 deletions(-)

Index: linux-2.6.24-rt1/include/linux/interrupt.h
===================================================================
--- linux-2.6.24-rt1.orig/include/linux/interrupt.h	2008-01-25 15:07:38.000000000 -0500
+++ linux-2.6.24-rt1/include/linux/interrupt.h	2008-01-25 15:07:38.000000000 -0500
@@ -362,10 +362,8 @@ static inline void tasklet_unlock(struct
 	clear_bit(TASKLET_STATE_RUN, &(t)->state);
 }
 
-static inline void tasklet_unlock_wait(struct tasklet_struct *t)
-{
-	while (test_bit(TASKLET_STATE_RUN, &(t)->state)) { barrier(); }
-}
+extern void tasklet_unlock_wait(struct tasklet_struct *t);
+
 #else
 # define tasklet_trylock(t)		1
 # define tasklet_tryunlock(t)		1
Index: linux-2.6.24-rt1/kernel/softirq.c
===================================================================
--- linux-2.6.24-rt1.orig/kernel/softirq.c	2008-01-25 15:07:38.000000000 -0500
+++ linux-2.6.24-rt1/kernel/softirq.c	2008-01-25 15:07:38.000000000 -0500
@@ -19,6 +19,7 @@
 #include <linux/mm.h>
 #include <linux/notifier.h>
 #include <linux/percpu.h>
+#include <linux/delay.h>
 #include <linux/cpu.h>
 #include <linux/freezer.h>
 #include <linux/kthread.h>
@@ -640,6 +641,25 @@ void __init softirq_init(void)
 	open_softirq(HI_SOFTIRQ, tasklet_hi_action, NULL);
 }
 
+#if defined(CONFIG_SMP) || defined(CONFIG_PREEMPT_RT)
+
+void tasklet_unlock_wait(struct tasklet_struct *t)
+{
+	while (test_bit(TASKLET_STATE_RUN, &(t)->state)) {
+		/*
+		 * Hack for now to avoid this busy-loop:
+		 */
+#ifdef CONFIG_PREEMPT_RT
+		msleep(1);
+#else
+		barrier();
+#endif
+	}
+}
+EXPORT_SYMBOL(tasklet_unlock_wait);
+
+#endif
+
 static int ksoftirqd(void * __data)
 {
 	struct sched_param param = { .sched_priority = MAX_USER_RT_PRIO/2 };
