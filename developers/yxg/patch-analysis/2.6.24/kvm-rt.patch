Subject: [patch] kvm: make vcpu_load/put preemptible
From: Ingo Molnar <mingo@elte.hu>

make vcpu_load/put preemptible.

Signed-off-by: Ingo Molnar <mingo@elte.hu>
---
 drivers/kvm/kvm_main.c |    8 ++++----
 drivers/kvm/svm.c      |    9 +++++++++
 drivers/kvm/vmx.c      |   12 ++++++++++++
 3 files changed, 25 insertions(+), 4 deletions(-)

Index: linux-2.6.24-rc7-rt2/drivers/kvm/kvm_main.c
===================================================================
--- linux-2.6.24-rc7-rt2.orig/drivers/kvm/kvm_main.c	2008-01-14 09:25:12.000000000 -0500
+++ linux-2.6.24-rc7-rt2/drivers/kvm/kvm_main.c	2008-01-14 09:27:01.000000000 -0500
@@ -3345,7 +3345,7 @@ static int kvm_reboot(struct notifier_bl
 		 * in vmx root mode.
 		 */
 		printk(KERN_INFO "kvm: exiting hardware virtualization\n");
-		on_each_cpu(hardware_disable, NULL, 0, 1);
+		schedule_on_each_cpu(hardware_disable, NULL, 0, 1);
 	}
 	return NOTIFY_OK;
 }
@@ -3518,7 +3518,7 @@ int kvm_init_x86(struct kvm_x86_ops *ops
 			goto out_free_0;
 	}
 
-	on_each_cpu(hardware_enable, NULL, 0, 1);
+	schedule_on_each_cpu(hardware_enable, NULL, 0, 1);
 	r = register_cpu_notifier(&kvm_cpu_notifier);
 	if (r)
 		goto out_free_1;
@@ -3563,7 +3563,7 @@ out_free_2:
 	unregister_reboot_notifier(&kvm_reboot_notifier);
 	unregister_cpu_notifier(&kvm_cpu_notifier);
 out_free_1:
-	on_each_cpu(hardware_disable, NULL, 0, 1);
+	schedule_on_each_cpu(hardware_disable, NULL, 0, 1);
 out_free_0:
 	kvm_x86_ops->hardware_unsetup();
 out:
@@ -3579,7 +3579,7 @@ void kvm_exit_x86(void)
 	sysdev_class_unregister(&kvm_sysdev_class);
 	unregister_reboot_notifier(&kvm_reboot_notifier);
 	unregister_cpu_notifier(&kvm_cpu_notifier);
-	on_each_cpu(hardware_disable, NULL, 0, 1);
+	schedule_on_each_cpu(hardware_disable, NULL, 0, 1);
 	kvm_x86_ops->hardware_unsetup();
 	kvm_x86_ops = NULL;
 }
Index: linux-2.6.24-rc7-rt2/drivers/kvm/svm.c
===================================================================
--- linux-2.6.24-rc7-rt2.orig/drivers/kvm/svm.c	2008-01-14 09:25:12.000000000 -0500
+++ linux-2.6.24-rc7-rt2/drivers/kvm/svm.c	2008-01-14 09:27:01.000000000 -0500
@@ -634,8 +634,17 @@ static void svm_free_vcpu(struct kvm_vcp
 static void svm_vcpu_load(struct kvm_vcpu *vcpu, int cpu)
 {
 	struct vcpu_svm *svm = to_svm(vcpu);
+	cpumask_t this_mask = cpumask_of_cpu(cpu);
 	int i;
 
+	/*
+	 * Keep the context preemptible, but do not migrate
+	 * away to another CPU. TODO: make sure this persists.
+	 * Save/restore original mask.
+	 */
+	if (unlikely(!cpus_equal(current->cpus_allowed, this_mask)))
+		set_cpus_allowed(current, cpumask_of_cpu(cpu));
+
 	if (unlikely(cpu != vcpu->cpu)) {
 		u64 tsc_this, delta;
 
Index: linux-2.6.24-rc7-rt2/drivers/kvm/vmx.c
===================================================================
--- linux-2.6.24-rc7-rt2.orig/drivers/kvm/vmx.c	2008-01-14 09:25:12.000000000 -0500
+++ linux-2.6.24-rc7-rt2/drivers/kvm/vmx.c	2008-01-14 09:27:01.000000000 -0500
@@ -427,6 +427,8 @@ static void vmx_load_host_state(struct v
 		local_irq_restore(flags);
 	}
 	reload_tss();
+	preempt_enable();
+
 	save_msrs(vmx->guest_msrs, vmx->save_nmsrs);
 	load_msrs(vmx->host_msrs, vmx->save_nmsrs);
 	if (msr_efer_need_save_restore(vmx))
@@ -440,9 +442,18 @@ static void vmx_load_host_state(struct v
 static void vmx_vcpu_load(struct kvm_vcpu *vcpu, int cpu)
 {
 	struct vcpu_vmx *vmx = to_vmx(vcpu);
+	cpumask_t this_mask = cpumask_of_cpu(cpu);
 	u64 phys_addr = __pa(vmx->vmcs);
 	u64 tsc_this, delta;
 
+	/*
+	 * Keep the context preemptible, but do not migrate
+	 * away to another CPU. TODO: make sure this persists.
+	 * Save/restore original mask.
+	 */
+	if (unlikely(!cpus_equal(current->cpus_allowed, this_mask)))
+		set_cpus_allowed(current, cpumask_of_cpu(cpu));
+
 	if (vcpu->cpu != cpu) {
 		vcpu_clear(vmx);
 		kvm_migrate_apic_timer(vcpu);
@@ -2204,6 +2215,7 @@ static void vmx_vcpu_run(struct kvm_vcpu
 	 */
 	vmcs_writel(HOST_CR0, read_cr0());
 
+	preempt_disable();
 	asm (
 		/* Store host registers */
 #ifdef CONFIG_X86_64
