---
 drivers/net/usb/usbnet.c   |    2 ++
 drivers/usb/core/devio.c   |    8 +++++---
 drivers/usb/core/message.c |   11 ++++++-----
 3 files changed, 13 insertions(+), 8 deletions(-)

Index: linux-2.6.24-rt1/drivers/net/usb/usbnet.c
===================================================================
--- linux-2.6.24-rt1.orig/drivers/net/usb/usbnet.c	2008-01-25 15:06:31.000000000 -0500
+++ linux-2.6.24-rt1/drivers/net/usb/usbnet.c	2008-01-25 15:07:58.000000000 -0500
@@ -905,6 +905,8 @@ static void tx_complete (struct urb *urb
 
 	urb->dev = NULL;
 	entry->state = tx_done;
+	spin_lock_rt(&dev->txq.lock);
+	spin_unlock_rt(&dev->txq.lock);
 	defer_bh(dev, skb, &dev->txq);
 }
 
Index: linux-2.6.24-rt1/drivers/usb/core/devio.c
===================================================================
--- linux-2.6.24-rt1.orig/drivers/usb/core/devio.c	2008-01-25 15:06:31.000000000 -0500
+++ linux-2.6.24-rt1/drivers/usb/core/devio.c	2008-01-25 15:07:58.000000000 -0500
@@ -307,10 +307,12 @@ static void async_completed(struct urb *
         struct async *as = urb->context;
         struct dev_state *ps = as->ps;
 	struct siginfo sinfo;
+	unsigned long flags;
+
+	spin_lock_irqsave(&ps->lock, flags);
+	list_move_tail(&as->asynclist, &ps->async_completed);
+	spin_unlock_irqrestore(&ps->lock, flags);
 
-        spin_lock(&ps->lock);
-        list_move_tail(&as->asynclist, &ps->async_completed);
-        spin_unlock(&ps->lock);
 	as->status = urb->status;
 	if (as->signr) {
 		sinfo.si_signo = as->signr;
Index: linux-2.6.24-rt1/drivers/usb/core/message.c
===================================================================
--- linux-2.6.24-rt1.orig/drivers/usb/core/message.c	2008-01-25 15:06:31.000000000 -0500
+++ linux-2.6.24-rt1/drivers/usb/core/message.c	2008-01-25 15:07:58.000000000 -0500
@@ -259,8 +259,9 @@ static void sg_complete (struct urb *urb
 {
 	struct usb_sg_request	*io = urb->context;
 	int status = urb->status;
+	unsigned long flags;
 
-	spin_lock (&io->lock);
+	spin_lock_irqsave (&io->lock, flags);
 
 	/* In 2.5 we require hcds' endpoint queues not to progress after fault
 	 * reports, until the completion callback (this!) returns.  That lets
@@ -294,7 +295,7 @@ static void sg_complete (struct urb *urb
 		 * unlink pending urbs so they won't rx/tx bad data.
 		 * careful: unlink can sometimes be synchronous...
 		 */
-		spin_unlock (&io->lock);
+		spin_unlock_irqrestore (&io->lock, flags);
 		for (i = 0, found = 0; i < io->entries; i++) {
 			if (!io->urbs [i] || !io->urbs [i]->dev)
 				continue;
@@ -309,7 +310,7 @@ static void sg_complete (struct urb *urb
 			} else if (urb == io->urbs [i])
 				found = 1;
 		}
-		spin_lock (&io->lock);
+		spin_lock_irqsave (&io->lock, flags);
 	}
 	urb->dev = NULL;
 
@@ -319,7 +320,7 @@ static void sg_complete (struct urb *urb
 	if (!io->count)
 		complete (&io->complete);
 
-	spin_unlock (&io->lock);
+	spin_unlock_irqrestore (&io->lock, flags);
 }
 
 
@@ -600,7 +601,7 @@ void usb_sg_cancel (struct usb_sg_reques
 				dev_warn (&io->dev->dev, "%s, unlink --> %d\n",
 					__FUNCTION__, retval);
 		}
-		spin_lock (&io->lock);
+		spin_lock_irqsave (&io->lock, flags);
 	}
 	spin_unlock_irqrestore (&io->lock, flags);
 }
