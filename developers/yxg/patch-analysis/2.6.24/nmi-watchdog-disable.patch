Subject: [patch] x86_64: do not enable the NMI watchdog by default
From: Ingo Molnar <mingo@elte.hu>

do not enable the NMI watchdog by default. Now that we have
lockdep i cannot remember the last time it caught a real bug,
but the NMI watchdog can /cause/ problems. Furthermore, to the
typical user, an NMI watchdog assert results in a total lockup
anyway (if under X). In that sense, all that the NMI watchdog
does is that it makes the system /less/ stable and /less/
debuggable.

people can still enable it either after bootup via:

   echo 1 > /proc/sys/kernel/nmi

or via the nmi_watchdog=1 or nmi_watchdog=2 boot options.

build and boot tested on an Athlon64 box.

Signed-off-by: Ingo Molnar <mingo@elte.hu>
---
 arch/x86/kernel/apic_64.c    |    1 -
 arch/x86/kernel/io_apic_64.c |    2 --
 arch/x86/kernel/nmi_64.c     |    2 +-
 arch/x86/kernel/smpboot_64.c |    1 -
 include/asm-x86/nmi_64.h     |    1 -
 5 files changed, 1 insertion(+), 6 deletions(-)

Index: linux-2.6.24-rt1/arch/x86/kernel/apic_64.c
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/kernel/apic_64.c	2008-01-25 15:06:30.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/kernel/apic_64.c	2008-01-25 15:08:01.000000000 -0500
@@ -535,7 +535,6 @@ void __cpuinit setup_local_APIC (void)
 			oldvalue, value);
 	}
 
-	nmi_watchdog_default();
 	setup_apic_nmi_watchdog(NULL);
 	apic_pm_activate();
 }
Index: linux-2.6.24-rt1/arch/x86/kernel/io_apic_64.c
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/kernel/io_apic_64.c	2008-01-25 15:07:44.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/kernel/io_apic_64.c	2008-01-25 15:08:01.000000000 -0500
@@ -1732,7 +1732,6 @@ static inline void check_timer(void)
 		 */
 		unmask_IO_APIC_irq(0);
 		if (!no_timer_check && timer_irq_works()) {
-			nmi_watchdog_default();
 			if (nmi_watchdog == NMI_IO_APIC) {
 				disable_8259A_irq(0);
 				setup_nmi();
@@ -1758,7 +1757,6 @@ static inline void check_timer(void)
 		setup_ExtINT_IRQ0_pin(apic2, pin2, cfg->vector);
 		if (timer_irq_works()) {
 			apic_printk(APIC_VERBOSE," works.\n");
-			nmi_watchdog_default();
 			if (nmi_watchdog == NMI_IO_APIC) {
 				setup_nmi();
 			}
Index: linux-2.6.24-rt1/arch/x86/kernel/nmi_64.c
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/kernel/nmi_64.c	2008-01-25 15:08:01.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/kernel/nmi_64.c	2008-01-25 15:08:01.000000000 -0500
@@ -52,7 +52,7 @@ static DEFINE_PER_CPU(short, wd_enabled)
 static int unknown_nmi_panic_callback(struct pt_regs *regs, int cpu);
 
 /* Run after command line and cpu_init init, but before all other checks */
-void nmi_watchdog_default(void)
+static inline void nmi_watchdog_default(void)
 {
 	if (nmi_watchdog != NMI_DEFAULT)
 		return;
Index: linux-2.6.24-rt1/arch/x86/kernel/smpboot_64.c
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/kernel/smpboot_64.c	2008-01-25 15:06:52.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/kernel/smpboot_64.c	2008-01-25 15:08:01.000000000 -0500
@@ -867,7 +867,6 @@ void __init smp_set_apicids(void)
  */
 void __init smp_prepare_cpus(unsigned int max_cpus)
 {
-	nmi_watchdog_default();
 	current_cpu_data = boot_cpu_data;
 	current_thread_info()->cpu = 0;  /* needed? */
 	smp_set_apicids();
Index: linux-2.6.24-rt1/include/asm-x86/nmi_64.h
===================================================================
--- linux-2.6.24-rt1.orig/include/asm-x86/nmi_64.h	2008-01-25 15:06:30.000000000 -0500
+++ linux-2.6.24-rt1/include/asm-x86/nmi_64.h	2008-01-25 15:08:01.000000000 -0500
@@ -59,7 +59,6 @@ extern void disable_timer_nmi_watchdog(v
 extern void enable_timer_nmi_watchdog(void);
 extern int nmi_watchdog_tick (struct pt_regs * regs, unsigned reason);
 
-extern void nmi_watchdog_default(void);
 extern int setup_nmi_watchdog(char *);
 
 extern atomic_t nmi_active;
