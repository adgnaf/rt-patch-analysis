Signed-off-by: Steven Rostedt <srostedt@redhat.com>

---
 arch/x86/kernel/irq_32.c |    4 ++--
 arch/x86/kernel/smp_32.c |    2 +-
 kernel/irq/handle.c      |    2 +-
 3 files changed, 4 insertions(+), 4 deletions(-)

Index: linux-2.6.24-rt1/kernel/irq/handle.c
===================================================================
--- linux-2.6.24-rt1.orig/kernel/irq/handle.c	2008-01-25 15:06:51.000000000 -0500
+++ linux-2.6.24-rt1/kernel/irq/handle.c	2008-01-25 15:06:54.000000000 -0500
@@ -163,7 +163,7 @@ irqreturn_t handle_IRQ_event(unsigned in
  * This is the original x86 implementation which is used for every
  * interrupt type.
  */
-fastcall unsigned int __do_IRQ(unsigned int irq)
+notrace fastcall unsigned int __do_IRQ(unsigned int irq)
 {
 	struct irq_desc *desc = irq_desc + irq;
 	struct irqaction *action;
Index: linux-2.6.24-rt1/arch/x86/kernel/irq_32.c
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/kernel/irq_32.c	2008-01-25 15:06:51.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/kernel/irq_32.c	2008-01-25 15:06:54.000000000 -0500
@@ -66,8 +66,8 @@ static union irq_ctx *softirq_ctx[NR_CPU
  * SMP cross-CPU interrupts have their own specific
  * handlers).
  */
-fastcall unsigned int do_IRQ(struct pt_regs *regs)
-{	
+notrace fastcall unsigned int do_IRQ(struct pt_regs *regs)
+{
 	struct pt_regs *old_regs;
 	/* high bit used in ret_from_ code */
 	int irq = ~regs->orig_eax;
Index: linux-2.6.24-rt1/arch/x86/kernel/smp_32.c
===================================================================
--- linux-2.6.24-rt1.orig/arch/x86/kernel/smp_32.c	2008-01-25 15:06:51.000000000 -0500
+++ linux-2.6.24-rt1/arch/x86/kernel/smp_32.c	2008-01-25 15:06:54.000000000 -0500
@@ -638,7 +638,7 @@ static void native_smp_send_stop(void)
  * all the work is done automatically when
  * we return from the interrupt.
  */
-fastcall void smp_reschedule_interrupt(struct pt_regs *regs)
+notrace fastcall void smp_reschedule_interrupt(struct pt_regs *regs)
 {
 	ack_APIC_irq();
 	__get_cpu_var(irq_stat).irq_resched_count++;
