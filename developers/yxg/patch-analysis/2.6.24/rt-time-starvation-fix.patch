Hey Ingo,
	Noticed -rt has been updated a few times and this is still missing so I
figured I'd resend it just in case you missed it:

	We've worked around this before, but its cropped up again. Since
update_wall_time is now called from a softirq, it can be preempted by a
high priority process. If its preempted for long enough, the clocksource
can wrap, causing time to stop incrementing, which if the preempting
process is checking the time, can cause a hard lockup.

This patch forces the clocksource to be read each tick, and accumulate
only the cycle count. This allows the update_wall_time to be deferred
w/o fear of hardware overflow.

thanks
-john

 include/linux/clocksource.h |    2 +-
 include/linux/time.h        |    1 +
 kernel/timer.c              |    1 +
 3 files changed, 3 insertions(+), 1 deletion(-)

linux-2.6.21-rc5_cycles-accumulated_C7.patch
============================================
Index: linux-2.6.24-rt1/include/linux/clocksource.h
===================================================================
--- linux-2.6.24-rt1.orig/include/linux/clocksource.h	2008-01-25 15:07:19.000000000 -0500
+++ linux-2.6.24-rt1/include/linux/clocksource.h	2008-01-25 15:08:11.000000000 -0500
@@ -92,7 +92,6 @@ struct clocksource {
 #endif
 
 	/* timekeeping specific data, ignore */
-	cycle_t cycle_interval;
 	u64	xtime_interval;
 	/*
 	 * Second part is written at each timer interrupt
@@ -101,6 +100,7 @@ struct clocksource {
 	 */
 	struct {
 		cycle_t cycle_last, cycle_accumulated, cycle_monotonic;
+		cycle_t cycle_interval;
 	} ____cacheline_aligned_in_smp;
 
 	u64 xtime_nsec;
Index: linux-2.6.24-rt1/include/linux/time.h
===================================================================
--- linux-2.6.24-rt1.orig/include/linux/time.h	2008-01-25 15:07:57.000000000 -0500
+++ linux-2.6.24-rt1/include/linux/time.h	2008-01-25 15:08:11.000000000 -0500
@@ -98,6 +98,7 @@ extern unsigned long read_persistent_clo
 extern int update_persistent_clock(struct timespec now);
 extern int no_sync_cmos_clock __read_mostly;
 void timekeeping_init(void);
+extern void timekeeping_accumulate(void);
 
 unsigned long get_seconds(void);
 struct timespec current_kernel_time(void);
Index: linux-2.6.24-rt1/kernel/timer.c
===================================================================
--- linux-2.6.24-rt1.orig/kernel/timer.c	2008-01-25 15:08:02.000000000 -0500
+++ linux-2.6.24-rt1/kernel/timer.c	2008-01-25 15:08:11.000000000 -0500
@@ -1044,6 +1044,7 @@ static void run_timer_softirq(struct sof
 void do_timer(unsigned long ticks)
 {
 	jiffies_64 += ticks;
+	timekeeping_accumulate();
 }
 
 #ifdef __ARCH_WANT_SYS_ALARM
