From: Avi Kiviti <avi@qumranet.com>
Date: Mon, 14 Jan 2008 16:35:08 +0200
Subject: kvm: move the apic timer migration

Move apic timer migration to a place where it does not cause the
"might sleep while atomic" check. The original place calls 
hrtimer_cancel in a preempt disabled region, which is fine in mainline,
but preempt-rt changes hrtimer_cancel, that the caller sleeps on a
wait_queue, when the callback of the timer is currently active.

Scheduled to go to mainline as well.

Signed-off-by: Avi Kiviti <avi@qumranet.com>
Signed-off-by: Thomas Gleixner <tgxl@linutronix.de>

---
 drivers/kvm/irq.h      |    2 +-
 drivers/kvm/kvm.h      |    6 ++++++
 drivers/kvm/kvm_main.c |    5 +++++
 drivers/kvm/lapic.c    |    2 +-
 4 files changed, 13 insertions(+), 2 deletions(-)

Index: linux-2.6.24-rt1/drivers/kvm/irq.h
===================================================================
--- linux-2.6.24-rt1.orig/drivers/kvm/irq.h	2008-01-25 15:06:47.000000000 -0500
+++ linux-2.6.24-rt1/drivers/kvm/irq.h	2008-01-25 15:07:06.000000000 -0500
@@ -160,6 +160,6 @@ void kvm_apic_timer_intr_post(struct kvm
 void kvm_timer_intr_post(struct kvm_vcpu *vcpu, int vec);
 void kvm_inject_pending_timer_irqs(struct kvm_vcpu *vcpu);
 void kvm_inject_apic_timer_irqs(struct kvm_vcpu *vcpu);
-void kvm_migrate_apic_timer(struct kvm_vcpu *vcpu);
+void __kvm_migrate_apic_timer(struct kvm_vcpu *vcpu);
 
 #endif
Index: linux-2.6.24-rt1/drivers/kvm/kvm.h
===================================================================
--- linux-2.6.24-rt1.orig/drivers/kvm/kvm.h	2008-01-25 15:06:47.000000000 -0500
+++ linux-2.6.24-rt1/drivers/kvm/kvm.h	2008-01-25 15:07:06.000000000 -0500
@@ -325,6 +325,7 @@ struct kvm_vcpu {
 	u64 pdptrs[4]; /* pae */
 	u64 shadow_efer;
 	u64 apic_base;
+	bool migrate_apic_timer;
 	struct kvm_lapic *apic;    /* kernel irqchip context */
 #define VCPU_MP_STATE_RUNNABLE          0
 #define VCPU_MP_STATE_UNINITIALIZED     1
@@ -775,6 +776,11 @@ static inline u32 get_rdx_init_val(void)
 	return 0x600; /* P6 family */
 }
 
+static inline void kvm_migrate_apic_timer(struct kvm_vcpu *vcpu)
+{
+	vcpu->migrate_apic_timer = true;
+}
+
 #define ASM_VMX_VMCLEAR_RAX       ".byte 0x66, 0x0f, 0xc7, 0x30"
 #define ASM_VMX_VMLAUNCH          ".byte 0x0f, 0x01, 0xc2"
 #define ASM_VMX_VMRESUME          ".byte 0x0f, 0x01, 0xc3"
Index: linux-2.6.24-rt1/drivers/kvm/kvm_main.c
===================================================================
--- linux-2.6.24-rt1.orig/drivers/kvm/kvm_main.c	2008-01-25 15:07:06.000000000 -0500
+++ linux-2.6.24-rt1/drivers/kvm/kvm_main.c	2008-01-25 15:07:06.000000000 -0500
@@ -2003,6 +2003,11 @@ again:
 	if (unlikely(r))
 		goto out;
 
+	if (vcpu->migrate_apic_timer) {
+		vcpu->migrate_apic_timer = false;
+		__kvm_migrate_apic_timer(vcpu);
+	}
+
 	preempt_disable();
 
 	kvm_x86_ops->prepare_guest_switch(vcpu);
Index: linux-2.6.24-rt1/drivers/kvm/lapic.c
===================================================================
--- linux-2.6.24-rt1.orig/drivers/kvm/lapic.c	2008-01-25 15:06:47.000000000 -0500
+++ linux-2.6.24-rt1/drivers/kvm/lapic.c	2008-01-25 15:07:06.000000000 -0500
@@ -1065,7 +1065,7 @@ void kvm_apic_post_state_restore(struct 
 	start_apic_timer(apic);
 }
 
-void kvm_migrate_apic_timer(struct kvm_vcpu *vcpu)
+void __kvm_migrate_apic_timer(struct kvm_vcpu *vcpu)
 {
 	struct kvm_lapic *apic = vcpu->apic;
 	struct hrtimer *timer;
