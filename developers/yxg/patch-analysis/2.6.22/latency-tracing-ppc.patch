 arch/powerpc/boot/Makefile |   10 +++++++++-
 arch/powerpc/kernel/time.c |    3 ++-
 arch/powerpc/mm/fault.c    |    4 ++--
 arch/ppc/boot/Makefile     |    9 +++++++++
 arch/ppc/kernel/time.c     |    2 +-
 arch/ppc/mm/fault.c        |    2 +-
 6 files changed, 24 insertions(+), 6 deletions(-)

Index: linux-rt.q/arch/powerpc/boot/Makefile
===================================================================
--- linux-rt.q.orig/arch/powerpc/boot/Makefile
+++ linux-rt.q/arch/powerpc/boot/Makefile
@@ -31,6 +31,14 @@ endif
 
 BOOTCFLAGS	+= -I$(obj) -I$(srctree)/$(obj)
 
+ifdef CONFIG_MCOUNT
+# do not trace the boot loader
+nullstring	:=
+space		:= $(nullstring) # end of the line
+pg_flag		= $(nullstring) -pg # end of the line
+CFLAGS		:= $(subst ${pg_flag},${space},${CFLAGS})
+endif
+
 $(obj)/44x.o: BOOTCFLAGS += -mcpu=440
 $(obj)/ebony.o: BOOTCFLAGS += -mcpu=440
 
@@ -55,7 +63,7 @@ obj-wlib := $(addsuffix .o, $(basename $
 obj-plat := $(addsuffix .o, $(basename $(addprefix $(obj)/, $(src-plat))))
 
 quiet_cmd_copy_zlib = COPY    $@
-      cmd_copy_zlib = sed "s@__attribute_used__@@;s@<linux/\([^>]*\).*@\"\1\"@" $< > $@
+      cmd_copy_zlib = sed "s@__attribute_used__@@;s@.include.<linux/module.h>@@;s@.include.<linux/spinlock.h>@@;s@.*spin.*lock.*@@;s@.*SPINLOCK.*@@;s@<linux/\([^>]*\).*@\"\1\"@" $< > $@
 
 quiet_cmd_copy_zlibheader = COPY    $@
       cmd_copy_zlibheader = sed "s@<linux/\([^>]*\).*@\"\1\"@" $< > $@
Index: linux-rt.q/arch/powerpc/kernel/time.c
===================================================================
--- linux-rt.q.orig/arch/powerpc/kernel/time.c
+++ linux-rt.q/arch/powerpc/kernel/time.c
@@ -530,7 +530,7 @@ static __inline__ void timer_recalc_offs
 }
 
 #ifdef CONFIG_SMP
-unsigned long profile_pc(struct pt_regs *regs)
+unsigned long notrace profile_pc(struct pt_regs *regs)
 {
 	unsigned long pc = instruction_pointer(regs);
 
@@ -906,6 +906,7 @@ void __init time_init(void)
 	tb_ticks_per_jiffy = ppc_tb_freq / HZ;
 	tb_ticks_per_sec = ppc_tb_freq;
 	tb_ticks_per_usec = ppc_tb_freq / 1000000;
+	cpu_khz  = ppc_tb_freq / 1000;
 	tb_to_us = mulhwu_scale_factor(ppc_tb_freq, 1000000);
 	calc_cputime_factors();
 
Index: linux-rt.q/arch/powerpc/mm/fault.c
===================================================================
--- linux-rt.q.orig/arch/powerpc/mm/fault.c
+++ linux-rt.q/arch/powerpc/mm/fault.c
@@ -138,8 +138,8 @@ static void do_dabr(struct pt_regs *regs
  * The return value is 0 if the fault was handled, or the signal
  * number if this is a kernel fault that can't be handled here.
  */
-int __kprobes do_page_fault(struct pt_regs *regs, unsigned long address,
-			    unsigned long error_code)
+int __kprobes notrace do_page_fault(struct pt_regs *regs,
+		unsigned long address, unsigned long error_code)
 {
 	struct vm_area_struct * vma;
 	struct mm_struct *mm = current->mm;
Index: linux-rt.q/arch/ppc/boot/Makefile
===================================================================
--- linux-rt.q.orig/arch/ppc/boot/Makefile
+++ linux-rt.q/arch/ppc/boot/Makefile
@@ -14,6 +14,15 @@
 #
 
 CFLAGS	 	+= -fno-builtin -D__BOOTER__ -Iarch/$(ARCH)/boot/include
+
+ifdef CONFIG_MCOUNT
+# do not trace the boot loader
+nullstring :=
+space      := $(nullstring) # end of the line
+pg_flag     = $(nullstring) -pg # end of the line
+CFLAGS     := $(subst ${pg_flag},${space},${CFLAGS})
+endif
+
 HOSTCFLAGS	+= -Iarch/$(ARCH)/boot/include
 
 BOOT_TARGETS	= zImage zImage.initrd znetboot znetboot.initrd
Index: linux-rt.q/arch/ppc/kernel/time.c
===================================================================
--- linux-rt.q.orig/arch/ppc/kernel/time.c
+++ linux-rt.q/arch/ppc/kernel/time.c
@@ -102,7 +102,7 @@ static inline int tb_delta(unsigned *jif
 }
 
 #ifdef CONFIG_SMP
-unsigned long profile_pc(struct pt_regs *regs)
+unsigned long notrace profile_pc(struct pt_regs *regs)
 {
 	unsigned long pc = instruction_pointer(regs);
 
Index: linux-rt.q/arch/ppc/mm/fault.c
===================================================================
--- linux-rt.q.orig/arch/ppc/mm/fault.c
+++ linux-rt.q/arch/ppc/mm/fault.c
@@ -89,7 +89,7 @@ static int store_updates_sp(struct pt_re
  * the error_code parameter is ESR for a data fault, 0 for an instruction
  * fault.
  */
-int do_page_fault(struct pt_regs *regs, unsigned long address,
+int notrace do_page_fault(struct pt_regs *regs, unsigned long address,
 		  unsigned long error_code)
 {
 	struct vm_area_struct * vma;
