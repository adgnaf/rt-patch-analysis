commit ff0e02b9a13936484eea6a713e99df0204d99732
Author: Shaohua Li <shaohua.li@intel.com>
Date:   Thu Apr 26 10:40:09 2007 +0800

    cpuidle: add support for max_cstate limit
    
    With CPUIDLE framework, the max_cstate (to limit max cpu c-state)
    parameter is ingored. Some systems require it to ignore C2/C3
    and some drivers like ipw require it too.
    
    Signed-off-by: Shaohua Li <shaohua.li@intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

---
 drivers/acpi/osl.c            |   10 ++++++++++
 drivers/acpi/processor_core.c |    2 ++
 drivers/acpi/processor_idle.c |   23 +++++++++++++++++++++--
 include/acpi/processor.h      |    1 +
 include/linux/acpi.h          |    7 ++-----
 5 files changed, 36 insertions(+), 7 deletions(-)

Index: linux-rt.q/drivers/acpi/osl.c
===================================================================
--- linux-rt.q.orig/drivers/acpi/osl.c
+++ linux-rt.q/drivers/acpi/osl.c
@@ -1056,6 +1056,16 @@ unsigned int max_cstate = ACPI_PROCESSOR
 
 EXPORT_SYMBOL(max_cstate);
 
+void (*acpi_do_set_cstate_limit)(void);
+EXPORT_SYMBOL(acpi_do_set_cstate_limit);
+
+void acpi_set_cstate_limit(unsigned int new_limit)
+{
+	max_cstate = new_limit;
+	if (acpi_do_set_cstate_limit)
+		acpi_do_set_cstate_limit();
+}
+
 /*
  * Acquire a spinlock.
  *
Index: linux-rt.q/drivers/acpi/processor_core.c
===================================================================
--- linux-rt.q.orig/drivers/acpi/processor_core.c
+++ linux-rt.q/drivers/acpi/processor_core.c
@@ -1024,11 +1024,13 @@ static int __init acpi_processor_init(vo
 	acpi_processor_ppc_init();
 
 	cpuidle_register_driver(&acpi_idle_driver);
+	acpi_do_set_cstate_limit = acpi_max_cstate_changed;
 	return 0;
 }
 
 static void __exit acpi_processor_exit(void)
 {
+	acpi_do_set_cstate_limit = NULL;
 	cpuidle_unregister_driver(&acpi_idle_driver);
 
 	acpi_processor_ppc_exit();
Index: linux-rt.q/drivers/acpi/processor_idle.c
===================================================================
--- linux-rt.q.orig/drivers/acpi/processor_idle.c
+++ linux-rt.q/drivers/acpi/processor_idle.c
@@ -67,7 +67,26 @@ ACPI_MODULE_NAME("processor_idle");
 #define C2_OVERHEAD			1	/* 1us */
 #define C3_OVERHEAD			1	/* 1us */
 
-module_param(max_cstate, uint, 0644);
+void acpi_max_cstate_changed(void)
+{
+	/* Driver will reset devices' max cstate limit */
+	cpuidle_force_redetect_devices(&acpi_idle_driver);
+}
+
+static int change_max_cstate(const char *val, struct kernel_param *kp)
+{
+	int max;
+
+	max = simple_strtol(val, NULL, 0);
+	if (!max)
+		return -EINVAL;
+	max_cstate = max;
+	if (acpi_do_set_cstate_limit)
+		acpi_do_set_cstate_limit();
+	return 0;
+}
+
+module_param_call(max_cstate, change_max_cstate, param_get_uint, &max_cstate, 0644);
 
 static unsigned int nocst __read_mostly;
 module_param(nocst, uint, 0000);
@@ -1047,7 +1066,7 @@ static int acpi_idle_init(struct cpuidle
 		return -EINVAL;
 	}
 
-	for (i = 1; i < ACPI_PROCESSOR_MAX_POWER; i++) {
+	for (i = 1; i < ACPI_PROCESSOR_MAX_POWER && i <= max_cstate; i++) {
 		cx = &pr->power.states[i];
 		state = &dev->states[count];
 
Index: linux-rt.q/include/acpi/processor.h
===================================================================
--- linux-rt.q.orig/include/acpi/processor.h
+++ linux-rt.q/include/acpi/processor.h
@@ -281,6 +281,7 @@ int acpi_processor_cst_has_changed(struc
 int acpi_processor_power_exit(struct acpi_processor *pr,
 			      struct acpi_device *device);
 extern struct cpuidle_driver acpi_idle_driver;
+void acpi_max_cstate_changed(void);
 
 /* in processor_thermal.c */
 int acpi_processor_get_limit_info(struct acpi_processor *pr);
Index: linux-rt.q/include/linux/acpi.h
===================================================================
--- linux-rt.q.orig/include/linux/acpi.h
+++ linux-rt.q/include/linux/acpi.h
@@ -206,11 +206,8 @@ static inline unsigned int acpi_get_csta
 {
 	return max_cstate;
 }
-static inline void acpi_set_cstate_limit(unsigned int new_limit)
-{
-	max_cstate = new_limit;
-	return;
-}
+extern void (*acpi_do_set_cstate_limit)(void);
+extern void acpi_set_cstate_limit(unsigned int new_limit);
 #else
 static inline unsigned int acpi_get_cstate_limit(void) { return 0; }
 static inline void acpi_set_cstate_limit(unsigned int new_limit) { return; }
