---
 include/linux/time.h      |    3 +++
 kernel/hrtimer.c          |   15 +++++++++++----
 kernel/time/timekeeping.c |    2 +-
 kernel/timer.c            |    7 ++++++-
 4 files changed, 21 insertions(+), 6 deletions(-)

Index: linux-rt.q/include/linux/time.h
===================================================================
--- linux-rt.q.orig/include/linux/time.h
+++ linux-rt.q/include/linux/time.h
@@ -119,6 +119,9 @@ extern int do_setitimer(int which, struc
 extern unsigned int alarm_setitimer(unsigned int seconds);
 extern int do_getitimer(int which, struct itimerval *value);
 extern void getnstimeofday(struct timespec *tv);
+#ifdef CONFIG_GENERIC_TIME
+s64 __get_nsec_offset(void);
+#endif
 
 extern struct timespec timespec_trunc(struct timespec t, unsigned gran);
 extern int timekeeping_is_continuous(void);
Index: linux-rt.q/kernel/hrtimer.c
===================================================================
--- linux-rt.q.orig/kernel/hrtimer.c
+++ linux-rt.q/kernel/hrtimer.c
@@ -116,10 +116,13 @@ void ktime_get_ts(struct timespec *ts)
 {
 	struct timespec tomono;
 	unsigned long seq;
+	s64 nsecs;
 
 	do {
 		seq = read_seqbegin(&xtime_lock);
-		getnstimeofday(ts);
+		*ts = xtime;
+		nsecs = __get_nsec_offset();
+		timespec_add_ns(ts, nsecs);
 		tomono = wall_to_monotonic;
 
 	} while (read_seqretry(&xtime_lock, seq));
@@ -141,10 +144,14 @@ static void hrtimer_get_softirq_time(str
 
 	do {
 		seq = read_seqbegin(&xtime_lock);
-#ifdef CONFIG_NO_HZ
-		getnstimeofday(&xts);
-#else
 		xts = xtime;
+#ifdef CONFIG_NO_HZ
+		{
+			s64 nsecs;
+
+			nsecs = __get_nsec_offset();
+			timespec_add_ns(&xts, nsecs);
+		}
 #endif
 		tom = wall_to_monotonic;
 	} while (read_seqretry(&xtime_lock, seq));
Index: linux-rt.q/kernel/time/timekeeping.c
===================================================================
--- linux-rt.q.orig/kernel/time/timekeeping.c
+++ linux-rt.q/kernel/time/timekeeping.c
@@ -54,7 +54,7 @@ static struct clocksource *clock; /* poi
  * called. Returns the number of nanoseconds since the
  * last call to update_wall_time() (adjusted by NTP scaling)
  */
-static inline s64 __get_nsec_offset(void)
+s64 __get_nsec_offset(void)
 {
 	cycle_t cycle_now, cycle_delta;
 	s64 ns_offset;
Index: linux-rt.q/kernel/timer.c
===================================================================
--- linux-rt.q.orig/kernel/timer.c
+++ linux-rt.q/kernel/timer.c
@@ -1102,6 +1102,8 @@ int do_sysinfo(struct sysinfo *info)
 
 	do {
 		struct timespec tp;
+		s64 nsecs;
+
 		seq = read_seqbegin(&xtime_lock);
 
 		/*
@@ -1111,7 +1113,10 @@ int do_sysinfo(struct sysinfo *info)
 		 * too.
 		 */
 
-		getnstimeofday(&tp);
+		tp = xtime;
+		nsecs = __get_nsec_offset();
+		timespec_add_ns(&tp, nsecs);
+
 		tp.tv_sec += wall_to_monotonic.tv_sec;
 		tp.tv_nsec += wall_to_monotonic.tv_nsec;
 		if (tp.tv_nsec - NSEC_PER_SEC >= 0) {
