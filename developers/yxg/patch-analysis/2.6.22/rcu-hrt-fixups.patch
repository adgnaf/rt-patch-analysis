 include/linux/rcuclassic.h |    3 +++
 include/linux/rcupdate.h   |    1 +
 include/linux/rcupreempt.h |    3 +++
 kernel/rcuclassic.c        |   19 ++++++++++++++++---
 kernel/rcupreempt.c        |   22 +++++++++++++++++++++-
 5 files changed, 44 insertions(+), 4 deletions(-)

Index: linux-rt.q/include/linux/rcuclassic.h
===================================================================
--- linux-rt.q.orig/include/linux/rcuclassic.h
+++ linux-rt.q/include/linux/rcuclassic.h
@@ -144,5 +144,8 @@ extern void rcu_check_callbacks(int cpu,
 extern void rcu_restart_cpu(int cpu);
 extern long rcu_batches_completed(void);
 
+struct softirq_action;
+extern void rcu_process_callbacks(struct softirq_action *unused);
+
 #endif /* __KERNEL__ */
 #endif /* __LINUX_RCUCLASSIC_H */
Index: linux-rt.q/include/linux/rcupdate.h
===================================================================
--- linux-rt.q.orig/include/linux/rcupdate.h
+++ linux-rt.q/include/linux/rcupdate.h
@@ -225,6 +225,7 @@ extern void rcu_barrier(void);
 
 /* Internal to kernel */
 extern void rcu_init(void);
+extern void rcu_advance_callbacks(int cpu, int user);
 extern void rcu_check_callbacks(int cpu, int user);
 
 #endif /* __KERNEL__ */
Index: linux-rt.q/include/linux/rcupreempt.h
===================================================================
--- linux-rt.q.orig/include/linux/rcupreempt.h
+++ linux-rt.q/include/linux/rcupreempt.h
@@ -49,6 +49,7 @@
 extern void __rcu_read_lock(void);
 extern void __rcu_read_unlock(void);
 extern int rcu_pending(int cpu);
+extern int rcu_needs_cpu(int cpu);
 
 #define __rcu_read_lock_bh()	{ rcu_read_lock(); local_bh_disable(); }
 #define __rcu_read_unlock_bh()	{ local_bh_enable(); rcu_read_unlock(); }
@@ -62,5 +63,7 @@ extern void rcu_check_callbacks(int cpu,
 extern void rcu_restart_cpu(int cpu);
 extern long rcu_batches_completed(void);
 
+extern void rcu_process_callbacks(unsigned long unused);
+
 #endif /* __KERNEL__ */
 #endif /* __LINUX_RCUPREEMPT_H */
Index: linux-rt.q/kernel/rcuclassic.c
===================================================================
--- linux-rt.q.orig/kernel/rcuclassic.c
+++ linux-rt.q/kernel/rcuclassic.c
@@ -382,6 +382,8 @@ static void rcu_offline_cpu(int cpu)
 static void __rcu_process_callbacks(struct rcu_ctrlblk *rcp,
 					struct rcu_data *rdp)
 {
+	unsigned long flags;
+
 	if (rdp->curlist && !rcu_batch_before(rcp->completed, rdp->batch)) {
 		*rdp->donetail = rdp->curlist;
 		rdp->donetail = rdp->curtail;
@@ -390,12 +392,12 @@ static void __rcu_process_callbacks(stru
 	}
 
 	if (rdp->nxtlist && !rdp->curlist) {
-		local_irq_disable();
+		local_irq_save(flags);
 		rdp->curlist = rdp->nxtlist;
 		rdp->curtail = rdp->nxttail;
 		rdp->nxtlist = NULL;
 		rdp->nxttail = &rdp->nxtlist;
-		local_irq_enable();
+		local_irq_restore(flags);
 
 		/*
 		 * start the next batch of callbacks
@@ -422,7 +424,7 @@ static void __rcu_process_callbacks(stru
 		rcu_do_batch(rdp);
 }
 
-static void rcu_process_callbacks(struct softirq_action *unused)
+void rcu_process_callbacks(struct softirq_action *unused)
 {
 	__rcu_process_callbacks(&rcu_ctrlblk, &__get_cpu_var(rcu_data));
 	__rcu_process_callbacks(&rcu_bh_ctrlblk, &__get_cpu_var(rcu_bh_data));
@@ -477,6 +479,17 @@ int rcu_needs_cpu(int cpu)
 	return (!!rdp->curlist || !!rdp_bh->curlist || rcu_pending(cpu));
 }
 
+void rcu_advance_callbacks(int cpu, int user)
+{
+	if (user ||
+	    (idle_cpu(cpu) && !in_softirq() &&
+				hardirq_count() <= (1 << HARDIRQ_SHIFT))) {
+		rcu_qsctr_inc(cpu);
+		rcu_bh_qsctr_inc(cpu);
+	} else if (!in_softirq())
+		rcu_bh_qsctr_inc(cpu);
+}
+
 void rcu_check_callbacks(int cpu, int user)
 {
 	if (user ||
Index: linux-rt.q/kernel/rcupreempt.c
===================================================================
--- linux-rt.q.orig/kernel/rcupreempt.c
+++ linux-rt.q/kernel/rcupreempt.c
@@ -259,7 +259,27 @@ void rcu_check_callbacks(int cpu, int us
 	}
 }
 
-static void rcu_process_callbacks(unsigned long data)
+/*
+ * Needed by dynticks, to make sure all RCU processing has finished
+ * when we go idle:
+ */
+void rcu_advance_callbacks(int cpu, int user)
+{
+	unsigned long oldirq;
+
+	if (rcu_ctrlblk.completed == rcu_data.completed) {
+		rcu_try_flip();
+		if (rcu_ctrlblk.completed == rcu_data.completed) {
+			return;
+		}
+	}
+	spin_lock_irqsave(&rcu_data.lock, oldirq);
+	RCU_TRACE(rcupreempt_trace_check_callbacks, &rcu_data.trace);
+	__rcu_advance_callbacks();
+	spin_unlock_irqrestore(&rcu_data.lock, oldirq);
+}
+
+void rcu_process_callbacks(unsigned long unused)
 {
 	unsigned long flags;
 	struct rcu_head *next, *list;
