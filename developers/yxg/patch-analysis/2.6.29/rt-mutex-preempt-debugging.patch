Subject: rt: mutex preempt debugging
From: Ingo Molnar <mingo@elte.hu>
Date: Wed Feb 04 00:03:06 CET 2009

Signed-off-by: Ingo Molnar <mingo@elte.hu>
---
 include/linux/preempt.h |   18 +++++++++++++++---
 include/linux/smp.h     |    2 +-
 init/main.c             |    2 +-
 kernel/sched.c          |   24 ++++++++++++++++++++++--
 kernel/softirq.c        |    6 +++---
 5 files changed, 42 insertions(+), 10 deletions(-)

Index: linux-2.6-tip/include/linux/preempt.h
===================================================================
--- linux-2.6-tip.orig/include/linux/preempt.h
+++ linux-2.6-tip/include/linux/preempt.h
@@ -9,6 +9,7 @@
 #include <linux/thread_info.h>
 #include <linux/linkage.h>
 #include <linux/list.h>
+#include <linux/thread_info.h>
 
 #if defined(CONFIG_DEBUG_PREEMPT) || defined(CONFIG_PREEMPT_TRACER)
   extern void add_preempt_count(int val);
@@ -21,11 +22,12 @@
 #define inc_preempt_count() add_preempt_count(1)
 #define dec_preempt_count() sub_preempt_count(1)
 
-#define preempt_count()	(current_thread_info()->preempt_count)
+#define preempt_count()		(current_thread_info()->preempt_count)
 
 #ifdef CONFIG_PREEMPT
 
 asmlinkage void preempt_schedule(void);
+asmlinkage void preempt_schedule_irq(void);
 
 #define preempt_disable() \
 do { \
@@ -33,12 +35,19 @@ do { \
 	barrier(); \
 } while (0)
 
-#define preempt_enable_no_resched() \
+#define __preempt_enable_no_resched() \
 do { \
 	barrier(); \
 	dec_preempt_count(); \
 } while (0)
 
+
+#ifdef CONFIG_DEBUG_PREEMPT
+extern void notrace preempt_enable_no_resched(void);
+#else
+# define preempt_enable_no_resched() __preempt_enable_no_resched()
+#endif
+
 #define preempt_check_resched() \
 do { \
 	if (unlikely(test_thread_flag(TIF_NEED_RESCHED))) \
@@ -47,7 +56,7 @@ do { \
 
 #define preempt_enable() \
 do { \
-	preempt_enable_no_resched(); \
+	__preempt_enable_no_resched(); \
 	barrier(); \
 	preempt_check_resched(); \
 } while (0)
@@ -84,6 +93,7 @@ do { \
 
 #define preempt_disable()		do { } while (0)
 #define preempt_enable_no_resched()	do { } while (0)
+#define __preempt_enable_no_resched()	do { } while (0)
 #define preempt_enable()		do { } while (0)
 #define preempt_check_resched()		do { } while (0)
 
@@ -91,6 +101,8 @@ do { \
 #define preempt_enable_no_resched_notrace()	do { } while (0)
 #define preempt_enable_notrace()		do { } while (0)
 
+#define preempt_schedule_irq()		do { } while (0)
+
 #endif
 
 #ifdef CONFIG_PREEMPT_NOTIFIERS
Index: linux-2.6-tip/include/linux/smp.h
===================================================================
--- linux-2.6-tip.orig/include/linux/smp.h
+++ linux-2.6-tip/include/linux/smp.h
@@ -177,7 +177,7 @@ static inline void init_call_single_data
 
 #define get_cpu()		({ preempt_disable(); smp_processor_id(); })
 #define put_cpu()		preempt_enable()
-#define put_cpu_no_resched()	preempt_enable_no_resched()
+#define put_cpu_no_resched()	__preempt_enable_no_resched()
 
 /*
  * Callback to arch code if there's nosmp or maxcpus=0 on the
Index: linux-2.6-tip/init/main.c
===================================================================
--- linux-2.6-tip.orig/init/main.c
+++ linux-2.6-tip/init/main.c
@@ -468,7 +468,7 @@ static noinline void __init_refok rest_i
 	 */
 	init_idle_bootup_task(current);
 	rcu_scheduler_starting();
-	preempt_enable_no_resched();
+	__preempt_enable_no_resched();
 	schedule();
 	preempt_disable();
 
Index: linux-2.6-tip/kernel/sched.c
===================================================================
--- linux-2.6-tip.orig/kernel/sched.c
+++ linux-2.6-tip/kernel/sched.c
@@ -2336,6 +2336,26 @@ static int sched_balance_self(int cpu, i
 
 #endif /* CONFIG_SMP */
 
+#ifdef CONFIG_DEBUG_PREEMPT
+void notrace preempt_enable_no_resched(void)
+{
+	static int once = 1;
+
+	barrier();
+	dec_preempt_count();
+
+	if (once && !preempt_count()) {
+		once = 0;
+		printk(KERN_ERR "BUG: %s:%d task might have lost a preemption check!\n",
+			current->comm, current->pid);
+		dump_stack();
+	}
+}
+
+EXPORT_SYMBOL(preempt_enable_no_resched);
+#endif
+
+
 /**
  * task_oncpu_function_call - call a function on the cpu on which a task runs
  * @p:		the task to evaluate
@@ -5092,7 +5112,7 @@ asmlinkage void __sched schedule(void)
 need_resched:
 	preempt_disable();
 	__schedule();
-	preempt_enable_no_resched();
+	__preempt_enable_no_resched();
 	if (unlikely(test_thread_flag(TIF_NEED_RESCHED)))
 		goto need_resched;
 }
@@ -9117,7 +9137,7 @@ void __init sched_init(void)
 	scheduler_running = 1;
 }
 
-#ifdef CONFIG_DEBUG_SPINLOCK_SLEEP
+#if defined(CONFIG_DEBUG_SPINLOCK_SLEEP) || defined(CONFIG_DEBUG_PREEMPT)
 void __might_sleep(char *file, int line)
 {
 #ifdef in_atomic
Index: linux-2.6-tip/kernel/softirq.c
===================================================================
--- linux-2.6-tip.orig/kernel/softirq.c
+++ linux-2.6-tip/kernel/softirq.c
@@ -386,7 +386,7 @@ void irq_exit(void)
 	if (idle_cpu(smp_processor_id()) && !in_interrupt() && !need_resched())
 		tick_nohz_stop_sched_tick(0);
 #endif
-	preempt_enable_no_resched();
+	__preempt_enable_no_resched();
 }
 
 /*
@@ -723,7 +723,7 @@ static int ksoftirqd(void * __data)
 	while (!kthread_should_stop()) {
 		preempt_disable();
 		if (!(local_softirq_pending() & mask)) {
-			preempt_enable_no_resched();
+			__preempt_enable_no_resched();
 			schedule();
 			preempt_disable();
 		}
@@ -742,7 +742,7 @@ static int ksoftirqd(void * __data)
 				goto wait_to_die;
 
 			local_irq_disable();
-			preempt_enable_no_resched();
+			__preempt_enable_no_resched();
 			set_softirq_pending(local_softirq_pending() & ~mask);
 			local_bh_disable();
 			local_irq_enable();
