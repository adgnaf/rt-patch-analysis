Subject: trace-setprio.patch
From: Thomas Gleixner <tglx@linutronix.de>
Date: Wed, 18 Mar 2009 10:16:21 +0100

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
---
 include/trace/sched_event_types.h |   31 +++++++++++++++++++++++++++++++
 kernel/sched.c                    |    4 ++--
 2 files changed, 33 insertions(+), 2 deletions(-)

Index: linux-2.6-tip/include/trace/sched_event_types.h
===================================================================
--- linux-2.6-tip.orig/include/trace/sched_event_types.h
+++ linux-2.6-tip/include/trace/sched_event_types.h
@@ -257,6 +257,37 @@ TRACE_EVENT(sched_process_exit,
 );
 
 /*
+ * Tracepoint for priority boosting/deboosting of a task:
+ *
+ * (NOTE: the 'rq' argument is not used by generic trace events,
+ *        but used by the latency tracer plugin. )
+ */
+TRACE_EVENT(sched_task_setprio,
+
+	TP_PROTO(struct rq *rq, struct task_struct *p, int oldprio),
+
+	TP_ARGS(rq, p, oldprio),
+
+	TP_STRUCT__entry(
+		__array(	char,	comm,	TASK_COMM_LEN	)
+		__field(	pid_t,	pid			)
+		__field(	int,	prio			)
+		__field(	int,	oldprio			)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->comm, p->comm, TASK_COMM_LEN);
+		__entry->pid		= p->pid;
+		__entry->prio		= p->prio;
+		__entry->oldprio	= oldprio;
+	),
+
+	TP_printk("task %s:%d [%d] oldprio=%d",
+		  __entry->comm, __entry->pid, __entry->prio,
+		  __entry->oldprio)
+);
+
+/*
  * Tracepoint for a waiting task:
  */
 TRACE_EVENT(sched_process_wait,
Index: linux-2.6-tip/kernel/sched.c
===================================================================
--- linux-2.6-tip.orig/kernel/sched.c
+++ linux-2.6-tip/kernel/sched.c
@@ -140,6 +140,7 @@ DEFINE_TRACE(sched_wakeup);
 DEFINE_TRACE(sched_wakeup_new);
 DEFINE_TRACE(sched_switch);
 DEFINE_TRACE(sched_migrate_task);
+DEFINE_TRACE(sched_task_setprio);
 
 #ifdef CONFIG_SMP
 
@@ -5859,7 +5860,7 @@ void task_setprio(struct task_struct *p,
 
 	p->prio = prio;
 
-//	trace_special_pid(p->pid, __PRIO(oldprio), PRIO(p));
+	trace_sched_task_setprio(rq, p, oldprio);
 
 	if (running)
 		p->sched_class->set_curr_task(rq);
@@ -5868,7 +5869,6 @@ void task_setprio(struct task_struct *p,
 
 		check_class_changed(rq, p, prev_class, oldprio, running);
 	}
-//	trace_special(prev_resched, _need_resched(), 0);
 
 out_unlock:
 	task_rq_unlock(rq, &flags);
