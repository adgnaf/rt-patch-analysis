commit 052a02a695a2600d6435555b4f82cfe1559a77d7
Author: Steven Rostedt <srostedt@redhat.com>
Date:   Tue Jan 27 10:40:52 2009 -0500

    preempt-rt: use a rcu callback for nf_conntrack_destroy
    
    __nf_conntrack_destroy is called with preemption disabled and calls
    functions that will schedule in PREEMPT_RT. When PREEMPT_RT is defined
    we call an RCU callback to do the destruction at a later time.
    
    Signed-off-by: Steven Rostedt <srostedt@redhat.com>

---
 include/linux/skbuff.h |    3 +++
 net/netfilter/core.c   |   24 +++++++++++++++++++++++-
 2 files changed, 26 insertions(+), 1 deletion(-)

Index: linux-2.6-tip/include/linux/skbuff.h
===================================================================
--- linux-2.6-tip.orig/include/linux/skbuff.h
+++ linux-2.6-tip/include/linux/skbuff.h
@@ -101,6 +101,9 @@ struct pipe_inode_info;
 #if defined(CONFIG_NF_CONNTRACK) || defined(CONFIG_NF_CONNTRACK_MODULE)
 struct nf_conntrack {
 	atomic_t use;
+#ifdef CONFIG_PREEMPT_RT
+	struct rcu_head rcu;
+#endif
 };
 #endif
 
Index: linux-2.6-tip/net/netfilter/core.c
===================================================================
--- linux-2.6-tip.orig/net/netfilter/core.c
+++ linux-2.6-tip/net/netfilter/core.c
@@ -235,7 +235,7 @@ EXPORT_SYMBOL(nf_ct_attach);
 void (*nf_ct_destroy)(struct nf_conntrack *);
 EXPORT_SYMBOL(nf_ct_destroy);
 
-void nf_conntrack_destroy(struct nf_conntrack *nfct)
+static void __nf_conntrack_destroy(struct nf_conntrack *nfct)
 {
 	void (*destroy)(struct nf_conntrack *);
 
@@ -245,6 +245,28 @@ void nf_conntrack_destroy(struct nf_conn
 	destroy(nfct);
 	rcu_read_unlock();
 }
+
+#ifdef CONFIG_PREEMPT_RT
+/*
+ * nf_contrack_destroy is called with preemption disabled
+ * and will call functions that might schedule in PREEMPT_RT.
+ * For PREEMPT_RT we use a rcu callback instead to handle
+ * the destroying.
+ */
+static void nf_conntrack_destroy_rcu(struct rcu_head *rhp)
+{
+	__nf_conntrack_destroy(container_of(rhp, struct nf_conntrack, rcu));
+}
+void nf_conntrack_destroy(struct nf_conntrack *nfct)
+{
+	call_rcu(&nfct->rcu, nf_conntrack_destroy_rcu);
+}
+#else /* !PREEMPT_RT */
+void nf_conntrack_destroy(struct nf_conntrack *nfct)
+{
+	__nf_conntrack_destroy(nfct);
+}
+#endif /* PREEMPT_RT */
 EXPORT_SYMBOL(nf_conntrack_destroy);
 #endif /* CONFIG_NF_CONNTRACK */
 
