Subject: rt: CONFIG_SPARSEIRQ=y fix
From: Ingo Molnar <mingo@elte.hu>
Date: Tue Feb 10 12:19:46 CET 2009

The desc->wait_for_handler waitqueue needs to be initialized for
dynamically allocated irq descriptors.

Signed-off-by: Ingo Molnar <mingo@elte.hu>
---
 kernel/irq/handle.c       |    1 +
 kernel/irq/manage.c       |    3 +++
 kernel/irq/numa_migrate.c |    1 +
 3 files changed, 5 insertions(+)

Index: linux-2.6-tip/kernel/irq/handle.c
===================================================================
--- linux-2.6-tip.orig/kernel/irq/handle.c
+++ linux-2.6-tip/kernel/irq/handle.c
@@ -106,6 +106,7 @@ static void init_one_irq_desc(int irq, s
 	memcpy(desc, &irq_desc_init, sizeof(struct irq_desc));
 
 	spin_lock_init(&desc->lock);
+	init_waitqueue_head(&desc->wait_for_handler);
 	desc->irq = irq;
 #ifdef CONFIG_SMP
 	desc->cpu = cpu;
Index: linux-2.6-tip/kernel/irq/manage.c
===================================================================
--- linux-2.6-tip.orig/kernel/irq/manage.c
+++ linux-2.6-tip/kernel/irq/manage.c
@@ -533,6 +533,7 @@ __setup_irq(unsigned int irq, struct irq
 	/* Reset broken irq detection when installing new handler */
 	desc->irq_count = 0;
 	desc->irqs_unhandled = 0;
+	init_waitqueue_head(&desc->wait_for_handler);
 
 	/*
 	 * Check whether we disabled the irq via the spurious handler
@@ -1023,6 +1024,8 @@ static int start_irq_thread(int irq, str
 	if (desc->thread || !ok_to_create_irq_threads)
 		return 0;
 
+	init_waitqueue_head(&desc->wait_for_handler);
+
 	desc->thread = kthread_create(do_irqd, desc, "IRQ-%d", irq);
 	if (!desc->thread) {
 		printk(KERN_ERR "irqd: could not create IRQ thread %d!\n", irq);
Index: linux-2.6-tip/kernel/irq/numa_migrate.c
===================================================================
--- linux-2.6-tip.orig/kernel/irq/numa_migrate.c
+++ linux-2.6-tip/kernel/irq/numa_migrate.c
@@ -43,6 +43,7 @@ static bool init_copy_one_irq_desc(int i
 		return false;
 	}
 	spin_lock_init(&desc->lock);
+	init_waitqueue_head(&desc->wait_for_handler);
 	desc->cpu = cpu;
 	lockdep_set_class(&desc->lock, &irq_desc_lock_class);
 	init_copy_kstat_irqs(old_desc, desc, cpu, nr_cpu_ids);
