Subject: arm-tracing-updates.patch
From: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date: Fri, 20 Mar 2009 16:23:17 +0100

Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
---
---
 arch/arm/include/asm/bitops.h    |    1 
 arch/arm/include/asm/ftrace.h    |   14 +++++++++++++
 arch/arm/kernel/Makefile         |    2 +
 arch/arm/kernel/return_address.c |   42 +++++++++++++++++++++++++++++++++++++++
 arch/arm/kernel/stacktrace.c     |    2 -
 5 files changed, 60 insertions(+), 1 deletion(-)

Index: linux-2.6-tip/arch/arm/include/asm/bitops.h
===================================================================
--- linux-2.6-tip.orig/arch/arm/include/asm/bitops.h
+++ linux-2.6-tip/arch/arm/include/asm/bitops.h
@@ -25,6 +25,7 @@
 
 #include <linux/compiler.h>
 #include <asm/system.h>
+#include <asm/memory.h>
 
 #define smp_mb__before_clear_bit()	mb()
 #define smp_mb__after_clear_bit()	mb()
Index: linux-2.6-tip/arch/arm/include/asm/ftrace.h
===================================================================
--- linux-2.6-tip.orig/arch/arm/include/asm/ftrace.h
+++ linux-2.6-tip/arch/arm/include/asm/ftrace.h
@@ -11,4 +11,18 @@ extern void mcount(void);
 
 #endif
 
+#ifndef __ASSEMBLY__
+void *return_address(unsigned int);
+
+#define HAVE_ARCH_CALLER_ADDR
+#define CALLER_ADDR0 ((unsigned long)return_address(0))
+#define CALLER_ADDR1 ((unsigned long)return_address(1))
+#define CALLER_ADDR2 ((unsigned long)return_address(2))
+#define CALLER_ADDR3 ((unsigned long)return_address(3))
+#define CALLER_ADDR4 ((unsigned long)return_address(4))
+#define CALLER_ADDR5 ((unsigned long)return_address(5))
+#define CALLER_ADDR6 ((unsigned long)return_address(6))
+
+#endif
+
 #endif /* _ASM_ARM_FTRACE */
Index: linux-2.6-tip/arch/arm/kernel/Makefile
===================================================================
--- linux-2.6-tip.orig/arch/arm/kernel/Makefile
+++ linux-2.6-tip/arch/arm/kernel/Makefile
@@ -7,6 +7,7 @@ AFLAGS_head.o := -DTEXT_OFFSET=$(TEXT_OF
 ifdef CONFIG_DYNAMIC_FTRACE
 CFLAGS_REMOVE_ftrace.o = -pg
 endif
+CFLAGS_REMOVE_return_address.o = -pg
 
 # Object file lists.
 
@@ -29,6 +30,7 @@ obj-$(CONFIG_ATAGS_PROC)	+= atags.o
 obj-$(CONFIG_OABI_COMPAT)	+= sys_oabi-compat.o
 obj-$(CONFIG_ARM_THUMBEE)	+= thumbee.o
 obj-$(CONFIG_KGDB)		+= kgdb.o
+obj-y				+= return_address.o
 
 obj-$(CONFIG_CRUNCH)		+= crunch.o crunch-bits.o
 AFLAGS_crunch-bits.o		:= -Wa,-mcpu=ep9312
Index: linux-2.6-tip/arch/arm/kernel/return_address.c
===================================================================
--- /dev/null
+++ linux-2.6-tip/arch/arm/kernel/return_address.c
@@ -0,0 +1,42 @@
+#include <linux/module.h>
+#include <linux/sched.h>
+
+#include "stacktrace.h"
+
+struct return_address_data {
+	unsigned int level;
+	void *addr;
+};
+
+static int save_return_addr(struct stackframe *frame, void *d)
+{
+	struct return_address_data *data = d;
+
+	if (!data->level) {
+		data->addr = (void *)frame->lr;
+
+		return 1;
+	} else {
+		--data->level;
+		return 0;
+	}
+}
+
+void *return_address(unsigned int level)
+{
+	unsigned long fp, base;
+	struct return_address_data data;
+
+	data.level = level + 1;
+
+	base = (unsigned long)task_stack_page(current);
+	asm("mov %0, fp" : "=r" (fp));
+
+	walk_stackframe(fp, base, base + THREAD_SIZE, save_return_addr, &data);
+
+	if (!data.level)
+		return data.addr;
+	else
+		return NULL;
+}
+EXPORT_SYMBOL_GPL(return_address);
Index: linux-2.6-tip/arch/arm/kernel/stacktrace.c
===================================================================
--- linux-2.6-tip.orig/arch/arm/kernel/stacktrace.c
+++ linux-2.6-tip/arch/arm/kernel/stacktrace.c
@@ -4,7 +4,7 @@
 
 #include "stacktrace.h"
 
-int walk_stackframe(unsigned long fp, unsigned long low, unsigned long high,
+int notrace walk_stackframe(unsigned long fp, unsigned long low, unsigned long high,
 		    int (*fn)(struct stackframe *, void *), void *data)
 {
 	struct stackframe *frame;
