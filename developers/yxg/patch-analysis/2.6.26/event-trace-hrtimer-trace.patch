From: Steven Rostedt <srostedt@redhat.com>
Subject: event-tracer: add clockevent trace

The old latency tracer recorded clockevent programming of the timer.
This patch adds that back in to the event tracer.

Signed-off-by: Steven Rostedt <srostedt@redhat.com>
---
 include/linux/ftrace.h      |    7 +++++++
 kernel/time/clockevents.c   |    3 +++
 kernel/trace/trace.c        |   26 ++++++++++++++++++++++++++
 kernel/trace/trace.h        |   13 +++++++++++++
 kernel/trace/trace_events.c |   44 ++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 93 insertions(+)

Index: linux-2.6.26/include/linux/ftrace.h
===================================================================
--- linux-2.6.26.orig/include/linux/ftrace.h
+++ linux-2.6.26/include/linux/ftrace.h
@@ -190,6 +190,12 @@ static inline void ftrace_event_task_dea
 {
 	trace_mark(ftrace_event_task_deactivate, "%p %d", p, cpu);
 }
+
+static inline void ftrace_event_program_event(ktime_t *expires, int64_t *delta)
+{
+	trace_mark(ftrace_event_timer, "%p %p", expires, delta);
+}
+
 #else
 # define ftrace_event_irq(irq, user, ip)	do { } while (0)
 # define ftrace_event_fault(ip, error, addr)	do { } while (0)
@@ -198,6 +204,7 @@ static inline void ftrace_event_task_dea
 # define ftrace_event_timestamp(now)		do { } while (0)
 # define ftrace_event_task_activate(p, cpu)	do { } while (0)
 # define ftrace_event_task_deactivate(p, cpu)	do { } while (0)
+# define ftrace_event_program_event(p, d)	do { } while (0)
 #endif /* CONFIG_TRACE_EVENTS */
 
 #endif /* _LINUX_FTRACE_H */
Index: linux-2.6.26/kernel/time/clockevents.c
===================================================================
--- linux-2.6.26.orig/kernel/time/clockevents.c
+++ linux-2.6.26/kernel/time/clockevents.c
@@ -18,6 +18,7 @@
 #include <linux/notifier.h>
 #include <linux/smp.h>
 #include <linux/sysdev.h>
+#include <linux/ftrace.h>
 
 /* The registered clock event devices */
 static LIST_HEAD(clockevent_devices);
@@ -90,6 +91,8 @@ int clockevents_program_event(struct clo
 
 	delta = ktime_to_ns(ktime_sub(expires, now));
 
+	ftrace_event_program_event(&expires, &delta);
+
 	if (delta <= 0)
 		return -ETIME;
 
Index: linux-2.6.26/kernel/trace/trace.c
===================================================================
--- linux-2.6.26.orig/kernel/trace/trace.c
+++ linux-2.6.26/kernel/trace/trace.c
@@ -1042,6 +1042,22 @@ void tracing_event_timer_set(struct trac
 	entry->timer.timer	= timer;
 }
 
+void tracing_event_program_event(struct trace_array *tr,
+				 struct trace_array_cpu *data,
+				 unsigned long flags,
+				 unsigned long ip,
+				 ktime_t *expires, int64_t *delta)
+{
+	struct trace_entry *entry;
+
+	entry = tracing_get_trace_entry(tr, data);
+	tracing_generic_entry_update(entry, flags);
+	entry->type		= TRACE_PROGRAM_EVENT;
+	entry->program.ip	= ip;
+	entry->program.expire	= *expires;
+	entry->program.delta	= *delta;
+}
+
 void tracing_event_timer_triggered(struct trace_array *tr,
 				   struct trace_array_cpu *data,
 				   unsigned long flags,
@@ -1729,6 +1745,11 @@ print_lat_fmt(struct trace_iterator *ite
 		trace_seq_printf(s, " (%Ld)\n",
 			   entry->timestamp.now.tv64);
 		break;
+	case TRACE_PROGRAM_EVENT:
+		seq_print_ip_sym(s, entry->program.ip, sym_flags);
+		trace_seq_printf(s, " (%Ld) (%Ld)\n",
+			   entry->program.expire, entry->program.delta);
+		break;
 	case TRACE_TASK_ACT:
 		seq_print_ip_sym(s, entry->task.ip, sym_flags);
 		comm = trace_find_cmdline(entry->task.pid);
@@ -1907,6 +1928,11 @@ static int print_trace_fmt(struct trace_
 		trace_seq_printf(s, " (%Ld)\n",
 			   entry->timestamp.now.tv64);
 		break;
+	case TRACE_PROGRAM_EVENT:
+		seq_print_ip_sym(s, entry->program.ip, sym_flags);
+		trace_seq_printf(s, " (%Ld) (%Ld)\n",
+			   entry->program.expire, entry->program.delta);
+		break;
 	case TRACE_TASK_ACT:
 		seq_print_ip_sym(s, entry->task.ip, sym_flags);
 		comm = trace_find_cmdline(entry->task.pid);
Index: linux-2.6.26/kernel/trace/trace.h
===================================================================
--- linux-2.6.26.orig/kernel/trace/trace.h
+++ linux-2.6.26/kernel/trace/trace.h
@@ -19,6 +19,7 @@ enum trace_type {
 	TRACE_TIMER_SET,
 	TRACE_TIMER_TRIG,
 	TRACE_TIMESTAMP,
+	TRACE_PROGRAM_EVENT,
 	TRACE_TASK_ACT,
 	TRACE_TASK_DEACT,
 	TRACE_SYSCALL,
@@ -76,6 +77,12 @@ struct timer_entry {
 	void			*timer;
 };
 
+struct program_entry {
+	unsigned long		ip;
+	ktime_t			expire;
+	int64_t			delta;
+};
+
 struct timestamp_entry {
 	unsigned long		ip;
 	ktime_t			now;
@@ -140,6 +147,7 @@ struct trace_entry {
 		struct fault_entry		fault;
 		struct timer_entry		timer;
 		struct timestamp_entry		timestamp;
+		struct program_entry		program;
 		struct task_entry		task;
 		struct wakeup_entry		wakeup;
 		struct syscall_entry		syscall;
@@ -324,6 +332,11 @@ void tracing_event_task_deactivate(struc
 				   unsigned long ip,
 				   struct task_struct *p,
 				   int cpu);
+void tracing_event_program_event(struct trace_array *tr,
+				 struct trace_array_cpu *data,
+				 unsigned long flags,
+				 unsigned long ip,
+				 ktime_t *expires, int64_t *delta);
 void tracing_event_wakeup(struct trace_array *tr,
 			  struct trace_array_cpu *data,
 			  unsigned long flags,
Index: linux-2.6.26/kernel/trace/trace_events.c
===================================================================
--- linux-2.6.26.orig/kernel/trace/trace_events.c
+++ linux-2.6.26/kernel/trace/trace_events.c
@@ -291,6 +291,40 @@ event_hrtimer_callback(void *probe_data,
 }
 
 static void
+event_program_event_callback(void *probe_data, void *call_data,
+			     const char *format, va_list *args)
+{
+	struct trace_array *tr = probe_data;
+	struct trace_array_cpu *data;
+	unsigned long flags;
+	ktime_t *expires;
+	int64_t *delta;
+	long disable;
+	int cpu;
+
+	if (!tracer_enabled)
+		return;
+
+	getarg(expires, *args);
+	getarg(delta, *args);
+
+	/* interrupts should be off, we are in an interrupt */
+	cpu = smp_processor_id();
+	data = tr->data[cpu];
+
+	disable = atomic_inc_return(&data->disabled);
+	if (disable != 1)
+		goto out;
+
+	local_save_flags(flags);
+	tracing_event_program_event(tr, data, flags, CALLER_ADDR1, expires, delta);
+
+ out:
+	atomic_dec(&data->disabled);
+}
+
+
+static void
 event_task_activate_callback(void *probe_data, void *call_data,
 			     const char *format, va_list *args)
 {
@@ -511,8 +545,16 @@ static void event_tracer_register(struct
 	if (ret)
 		goto out9;
 
+	ret = event_register_marker("ftrace_event_timer", "%p %p",
+				    event_program_event_callback, tr);
+	if (ret)
+		goto out10;
+
 	return;
 
+ out10:
+	marker_probe_unregister("kernel_sched_schedule",
+				event_ctx_callback, tr);
  out9:
 	marker_probe_unregister("kernel_sched_wakeup_new",
 				event_wakeup_callback, tr);
@@ -544,6 +586,8 @@ static void event_tracer_register(struct
 
 static void event_tracer_unregister(struct trace_array *tr)
 {
+	marker_probe_unregister("ftrace_event_timer",
+				event_program_event_callback, tr);
 	marker_probe_unregister("kernel_sched_schedule",
 				event_ctx_callback, tr);
 	marker_probe_unregister("kernel_sched_wakeup_new",
