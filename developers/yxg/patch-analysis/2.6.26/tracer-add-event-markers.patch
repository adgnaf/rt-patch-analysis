Add markers to various events

This patch adds markers to various events in the kernel.
(interrupts, task activation and hrtimers)

Signed-off-by: Steven Rostedt <srostedt@redhat.com>
---
 arch/x86/kernel/apic_32.c  |    2 +
 arch/x86/kernel/irq_32.c   |    3 ++
 arch/x86/kernel/irq_64.c   |    3 ++
 arch/x86/kernel/traps_32.c |    3 ++
 arch/x86/kernel/traps_64.c |    3 ++
 arch/x86/mm/fault.c        |    3 ++
 include/linux/ftrace.h     |   49 +++++++++++++++++++++++++++++++++++++++++++++
 kernel/hrtimer.c           |    6 +++++
 kernel/sched.c             |    7 ++++++
 9 files changed, 79 insertions(+)

Index: linux-2.6.26/arch/x86/kernel/apic_32.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/apic_32.c
+++ linux-2.6.26/arch/x86/kernel/apic_32.c
@@ -28,6 +28,7 @@
 #include <linux/acpi_pmtmr.h>
 #include <linux/module.h>
 #include <linux/dmi.h>
+#include <linux/ftrace.h>
 
 #include <asm/atomic.h>
 #include <asm/smp.h>
@@ -604,6 +605,7 @@ void smp_apic_timer_interrupt(struct pt_
 {
 	struct pt_regs *old_regs = set_irq_regs(regs);
 
+	ftrace_event_irq(-1, user_mode(regs), regs->eip);
 	/*
 	 * NOTE! We'd better ACK the irq immediately,
 	 * because timer handling can be slow.
Index: linux-2.6.26/arch/x86/kernel/irq_32.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/irq_32.c
+++ linux-2.6.26/arch/x86/kernel/irq_32.c
@@ -16,6 +16,8 @@
 #include <linux/cpu.h>
 #include <linux/delay.h>
 
+#include <linux/ftrace.h>
+
 #include <asm/apic.h>
 #include <asm/uaccess.h>
 
@@ -85,6 +87,7 @@ unsigned int do_IRQ(struct pt_regs *regs
 
 	old_regs = set_irq_regs(regs);
 	irq_enter();
+	ftrace_event_irq(irq, user_mode(regs), regs->eip);
 #ifdef CONFIG_DEBUG_STACKOVERFLOW
 	/* Debugging check for stack overflow: is there less than 1KB free? */
 	{
Index: linux-2.6.26/arch/x86/kernel/irq_64.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/irq_64.c
+++ linux-2.6.26/arch/x86/kernel/irq_64.c
@@ -13,6 +13,7 @@
 #include <linux/seq_file.h>
 #include <linux/module.h>
 #include <linux/delay.h>
+#include <linux/ftrace.h>
 #include <asm/uaccess.h>
 #include <asm/io_apic.h>
 #include <asm/idle.h>
@@ -169,6 +170,8 @@ asmlinkage unsigned int do_IRQ(struct pt
 	irq_enter();
 	irq = __get_cpu_var(vector_irq)[vector];
 
+	ftrace_event_irq(irq, user_mode(regs), regs->ip);
+
 #ifdef CONFIG_DEBUG_STACKOVERFLOW
 	stack_overflow_check(regs);
 #endif
Index: linux-2.6.26/arch/x86/kernel/traps_32.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/traps_32.c
+++ linux-2.6.26/arch/x86/kernel/traps_32.c
@@ -31,6 +31,7 @@
 #include <linux/bug.h>
 #include <linux/nmi.h>
 #include <linux/mm.h>
+#include <linux/ftrace.h>
 
 #ifdef CONFIG_EISA
 #include <linux/ioport.h>
@@ -835,6 +836,8 @@ notrace __kprobes void do_nmi(struct pt_
 
 	nmi_enter();
 
+	ftrace_event_irq(-1, user_mode(regs), regs->eip);
+
 	cpu = smp_processor_id();
 
 	++nmi_count(cpu);
Index: linux-2.6.26/arch/x86/kernel/traps_64.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/traps_64.c
+++ linux-2.6.26/arch/x86/kernel/traps_64.c
@@ -32,6 +32,7 @@
 #include <linux/bug.h>
 #include <linux/kdebug.h>
 #include <linux/utsname.h>
+#include <linux/ftrace.h>
 
 #include <mach_traps.h>
 
@@ -835,6 +836,8 @@ asmlinkage notrace  __kprobes void defau
 
 	cpu = smp_processor_id();
 
+	ftrace_event_irq(-1, user_mode(regs), regs->ip);
+
 	/* Only the BSP gets external NMIs from the system.  */
 	if (!cpu)
 		reason = get_nmi_reason();
Index: linux-2.6.26/arch/x86/mm/fault.c
===================================================================
--- linux-2.6.26.orig/arch/x86/mm/fault.c
+++ linux-2.6.26/arch/x86/mm/fault.c
@@ -25,6 +25,7 @@
 #include <linux/kprobes.h>
 #include <linux/uaccess.h>
 #include <linux/kdebug.h>
+#include <linux/ftrace.h>
 
 #include <asm/system.h>
 #include <asm/desc.h>
@@ -602,6 +603,8 @@ void __kprobes do_page_fault(struct pt_r
 	/* get the address */
 	address = read_cr2();
 
+	ftrace_event_fault(regs->ip, error_code, address);
+
 	si_code = SEGV_MAPERR;
 
 	if (notify_page_fault(regs))
Index: linux-2.6.26/include/linux/ftrace.h
===================================================================
--- linux-2.6.26.orig/include/linux/ftrace.h
+++ linux-2.6.26/include/linux/ftrace.h
@@ -4,6 +4,7 @@
 #ifdef CONFIG_FTRACE
 
 #include <linux/linkage.h>
+#include <linux/ktime.h>
 #include <linux/fs.h>
 
 extern int ftrace_enabled;
@@ -140,4 +141,52 @@ static inline void
 ftrace_special(unsigned long arg1, unsigned long arg2, unsigned long arg3) { }
 #endif
 
+#ifdef CONFIG_EVENT_TRACER
+#include <linux/marker.h>
+
+static inline void ftrace_event_irq(int irq, int user, unsigned long ip)
+{
+	trace_mark(ftrace_event_irq, "%d %d %ld", irq, user, ip);
+}
+
+static inline void ftrace_event_fault(unsigned long ip, unsigned long error,
+				      unsigned long addr)
+{
+	trace_mark(ftrace_event_fault, "%ld %ld %ld", ip, error, addr);
+}
+
+static inline void ftrace_event_timer_set(void *p1, void *p2)
+{
+	trace_mark(ftrace_event_timer_set, "%p %p", p1, p2);
+}
+
+static inline void ftrace_event_timer_triggered(void *p1, void *p2)
+{
+	trace_mark(ftrace_event_timer_triggered, "%p %p", p1, p2);
+}
+
+static inline void ftrace_event_timestamp(ktime_t *time)
+{
+	trace_mark(ftrace_event_hrtimer, "%p", time);
+}
+
+static inline void ftrace_event_task_activate(struct task_struct *p, int cpu)
+{
+	trace_mark(ftrace_event_task_activate, "%p %d", p, cpu);
+}
+
+static inline void ftrace_event_task_deactivate(struct task_struct *p, int cpu)
+{
+	trace_mark(ftrace_event_task_deactivate, "%p %d", p, cpu);
+}
+#else
+# define ftrace_event_irq(irq, user, ip)	do { } while (0)
+# define ftrace_event_fault(ip, error, addr)	do { } while (0)
+# define ftrace_event_timer_set(p1, p2)		do { } while (0)
+# define ftrace_event_timer_triggered(p1, p2)	do { } while (0)
+# define ftrace_event_timestamp(now)		do { } while (0)
+# define ftrace_event_task_activate(p, cpu)	do { } while (0)
+# define ftrace_event_task_deactivate(p, cpu)	do { } while (0)
+#endif /* CONFIG_TRACE_EVENTS */
+
 #endif /* _LINUX_FTRACE_H */
Index: linux-2.6.26/kernel/hrtimer.c
===================================================================
--- linux-2.6.26.orig/kernel/hrtimer.c
+++ linux-2.6.26/kernel/hrtimer.c
@@ -44,6 +44,7 @@
 #include <linux/seq_file.h>
 #include <linux/err.h>
 #include <linux/debugobjects.h>
+#include <linux/ftrace.h>
 
 #include <asm/uaccess.h>
 
@@ -840,6 +841,8 @@ static void enqueue_hrtimer(struct hrtim
 
 	debug_hrtimer_activate(timer);
 
+	ftrace_event_timer_set(&timer->expires, timer);
+
 	/*
 	 * Find the right place in the rbtree:
 	 */
@@ -1293,6 +1296,7 @@ void hrtimer_interrupt(struct clock_even
 
  retry:
 	now = ktime_get();
+	ftrace_event_timestamp(&now);
 
 	expires_next.tv64 = KTIME_MAX;
 
@@ -1321,6 +1325,8 @@ void hrtimer_interrupt(struct clock_even
 				break;
 			}
 
+			ftrace_event_timer_triggered(&timer->expires, timer);
+
 			/* Move softirq callbacks to the pending list */
 			if (timer->cb_mode == HRTIMER_CB_SOFTIRQ) {
 				__remove_hrtimer(timer, base,
Index: linux-2.6.26/kernel/sched.c
===================================================================
--- linux-2.6.26.orig/kernel/sched.c
+++ linux-2.6.26/kernel/sched.c
@@ -86,6 +86,11 @@
 #define PRIO_TO_NICE(prio)	((prio) - MAX_RT_PRIO - 20)
 #define TASK_NICE(p)		PRIO_TO_NICE((p)->static_prio)
 
+#define __PRIO(prio) \
+	((prio) <= 99 ? 199 - (prio) : (prio) - 120)
+
+#define PRIO(p) __PRIO((p)->prio)
+
 /*
  * 'User priority' is the nice value converted to something we
  * can work with better when scaling various scheduler parameters,
@@ -1635,6 +1640,7 @@ static void activate_task(struct rq *rq,
 	if (task_contributes_to_load(p))
 		rq->nr_uninterruptible--;
 
+	ftrace_event_task_activate(p, cpu_of(rq));
 	enqueue_task(rq, p, wakeup);
 	inc_nr_running(p, rq);
 }
@@ -1647,6 +1653,7 @@ static void deactivate_task(struct rq *r
 	if (task_contributes_to_load(p))
 		rq->nr_uninterruptible++;
 
+	ftrace_event_task_deactivate(p, cpu_of(rq));
 	dequeue_task(rq, p, sleep);
 	dec_nr_running(p, rq);
 }
