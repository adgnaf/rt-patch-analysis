---
 include/linux/lockdep.h |   28 ++++++++++++++++++++++++++++
 kernel/rt.c             |   25 ++++++++++++++++---------
 kernel/rtmutex.c        |    4 ++--
 3 files changed, 46 insertions(+), 11 deletions(-)

Index: linux-2.6.26/include/linux/lockdep.h
===================================================================
--- linux-2.6.26.orig/include/linux/lockdep.h
+++ linux-2.6.26/include/linux/lockdep.h
@@ -361,6 +361,28 @@ do {								\
 	lock_acquired(&(_lock)->dep_map);			\
 } while (0)
 
+#define LOCK_CONTENDED_RT(_lock, f_try, f_lock)			\
+do {								\
+	if (!f_try(&(_lock)->lock)) {				\
+		lock_contended(&(_lock)->dep_map, _RET_IP_);	\
+		f_lock(&(_lock)->lock);				\
+		lock_acquired(&(_lock)->dep_map);		\
+	}							\
+} while (0)
+
+
+#define LOCK_CONTENDED_RT_RET(_lock, f_try, f_lock)		\
+({								\
+ 	int ret = 0;						\
+	if (!f_try(&(_lock)->lock)) {				\
+		lock_contended(&(_lock)->dep_map, _RET_IP_);	\
+		ret = f_lock(&(_lock)->lock);			\
+ 		if (!ret)					\
+			lock_acquired(&(_lock)->dep_map);	\
+	}							\
+ 	ret;							\
+})
+
 #else /* CONFIG_LOCK_STAT */
 
 #define lock_contended(lockdep_map, ip) do {} while (0)
@@ -369,6 +391,12 @@ do {								\
 #define LOCK_CONTENDED(_lock, try, lock) \
 	lock(_lock)
 
+#define LOCK_CONTENDED_RT(_lock, f_try, f_lock) \
+	f_lock(&(_lock)->lock)
+
+#define LOCK_CONTENDED_RT_RET(_lock, f_try, f_lock) \
+	f_lock(&(_lock)->lock)
+
 #endif /* CONFIG_LOCK_STAT */
 
 #if defined(CONFIG_TRACE_IRQFLAGS) && defined(CONFIG_GENERIC_HARDIRQS)
Index: linux-2.6.26/kernel/rt.c
===================================================================
--- linux-2.6.26.orig/kernel/rt.c
+++ linux-2.6.26/kernel/rt.c
@@ -99,16 +99,22 @@ EXPORT_SYMBOL(_mutex_init);
 void __lockfunc _mutex_lock(struct mutex *lock)
 {
 	mutex_acquire(&lock->dep_map, 0, 0, _RET_IP_);
-	rt_mutex_lock(&lock->lock);
+	LOCK_CONTENDED_RT(lock, rt_mutex_trylock, rt_mutex_lock);
 }
 EXPORT_SYMBOL(_mutex_lock);
 
+static int __lockfunc __rt_mutex_lock_interruptible(struct rt_mutex *lock)
+{
+	return rt_mutex_lock_interruptible(lock, 0);
+}
+
 int __lockfunc _mutex_lock_interruptible(struct mutex *lock)
 {
 	int ret;
 
 	mutex_acquire(&lock->dep_map, 0, 0, _RET_IP_);
-	ret = rt_mutex_lock_interruptible(&lock->lock, 0);
+	ret = LOCK_CONTENDED_RT_RET(lock, rt_mutex_trylock,
+			__rt_mutex_lock_interruptible);
 	if (ret)
 		mutex_release(&lock->dep_map, 1, _RET_IP_);
 	return ret;
@@ -131,7 +137,7 @@ EXPORT_SYMBOL(_mutex_lock_killable);
 void __lockfunc _mutex_lock_nested(struct mutex *lock, int subclass)
 {
 	mutex_acquire(&lock->dep_map, subclass, 0, _RET_IP_);
-	rt_mutex_lock(&lock->lock);
+	LOCK_CONTENDED_RT(lock, rt_mutex_trylock, rt_mutex_lock);
 }
 EXPORT_SYMBOL(_mutex_lock_nested);
 
@@ -140,7 +146,8 @@ int __lockfunc _mutex_lock_interruptible
 	int ret;
 
 	mutex_acquire(&lock->dep_map, subclass, 0, _RET_IP_);
-	ret = rt_mutex_lock_interruptible(&lock->lock, 0);
+	ret = LOCK_CONTENDED_RT_RET(lock, rt_mutex_trylock,
+			__rt_mutex_lock_interruptible);
 	if (ret)
 		mutex_release(&lock->dep_map, 1, _RET_IP_);
 	return ret;
@@ -228,7 +235,7 @@ EXPORT_SYMBOL(rt_read_trylock);
 void __lockfunc rt_write_lock(rwlock_t *rwlock)
 {
 	rwlock_acquire(&rwlock->dep_map, 0, 0, _RET_IP_);
-	__rt_spin_lock(&rwlock->lock);
+	LOCK_CONTENDED_RT(rwlock, rt_mutex_trylock, __rt_spin_lock);
 }
 EXPORT_SYMBOL(rt_write_lock);
 
@@ -248,7 +255,7 @@ void __lockfunc rt_read_lock(rwlock_t *r
 		return;
 	}
 	spin_unlock_irqrestore(&lock->wait_lock, flags);
-	__rt_spin_lock(lock);
+	LOCK_CONTENDED_RT(rwlock, rt_mutex_trylock, __rt_spin_lock);
 }
 
 EXPORT_SYMBOL(rt_read_lock);
@@ -384,14 +391,14 @@ EXPORT_SYMBOL(rt_down_write_trylock);
 void  rt_down_write(struct rw_semaphore *rwsem)
 {
 	rwsem_acquire(&rwsem->dep_map, 0, 0, _RET_IP_);
-	rt_mutex_lock(&rwsem->lock);
+	LOCK_CONTENDED_RT(rwsem, rt_mutex_trylock, rt_mutex_lock);
 }
 EXPORT_SYMBOL(rt_down_write);
 
 void  rt_down_write_nested(struct rw_semaphore *rwsem, int subclass)
 {
 	rwsem_acquire(&rwsem->dep_map, subclass, 0, _RET_IP_);
-	rt_mutex_lock(&rwsem->lock);
+	LOCK_CONTENDED_RT(rwsem, rt_mutex_trylock, rt_mutex_lock);
 }
 EXPORT_SYMBOL(rt_down_write_nested);
 
@@ -436,7 +443,7 @@ static void __rt_down_read(struct rw_sem
 		return;
 	}
 	spin_unlock_irqrestore(&rwsem->lock.wait_lock, flags);
-	rt_mutex_lock(&rwsem->lock);
+	LOCK_CONTENDED_RT(rwsem, rt_mutex_trylock, rt_mutex_lock);
 }
 
 void  rt_down_read(struct rw_semaphore *rwsem)
Index: linux-2.6.26/kernel/rtmutex.c
===================================================================
--- linux-2.6.26.orig/kernel/rtmutex.c
+++ linux-2.6.26/kernel/rtmutex.c
@@ -787,8 +787,8 @@ rt_spin_lock_slowunlock(struct rt_mutex 
 
 void __lockfunc rt_spin_lock(spinlock_t *lock)
 {
-	rt_spin_lock_fastlock(&lock->lock, rt_spin_lock_slowlock);
 	spin_acquire(&lock->dep_map, 0, 0, _RET_IP_);
+	LOCK_CONTENDED_RT(lock, rt_mutex_trylock, __rt_spin_lock);
 }
 EXPORT_SYMBOL(rt_spin_lock);
 
@@ -802,8 +802,8 @@ EXPORT_SYMBOL(__rt_spin_lock);
 
 void __lockfunc rt_spin_lock_nested(spinlock_t *lock, int subclass)
 {
-	rt_spin_lock_fastlock(&lock->lock, rt_spin_lock_slowlock);
 	spin_acquire(&lock->dep_map, subclass, 0, _RET_IP_);
+	LOCK_CONTENDED_RT(lock, rt_mutex_trylock, __rt_spin_lock);
 }
 EXPORT_SYMBOL(rt_spin_lock_nested);
 
