Subject: [patch] x86_64: do not enable the NMI watchdog by default
From: Ingo Molnar <mingo@elte.hu>

do not enable the NMI watchdog by default. Now that we have
lockdep i cannot remember the last time it caught a real bug,
but the NMI watchdog can /cause/ problems. Furthermore, to the
typical user, an NMI watchdog assert results in a total lockup
anyway (if under X). In that sense, all that the NMI watchdog
does is that it makes the system /less/ stable and /less/
debuggable.

people can still enable it either after bootup via:

   echo 1 > /proc/sys/kernel/nmi

or via the nmi_watchdog=1 or nmi_watchdog=2 boot options.

build and boot tested on an Athlon64 box.

Signed-off-by: Ingo Molnar <mingo@elte.hu>
---
 arch/x86/kernel/apic_64.c    |    1 -
 arch/x86/kernel/io_apic_64.c |    2 --
 arch/x86/kernel/nmi_64.c     |    2 +-
 arch/x86/kernel/smpboot.c    |    1 -
 include/asm-x86/nmi.h        |    3 ---
 5 files changed, 1 insertion(+), 8 deletions(-)

Index: linux-2.6.26/arch/x86/kernel/apic_64.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/apic_64.c
+++ linux-2.6.26/arch/x86/kernel/apic_64.c
@@ -850,7 +850,6 @@ static void __cpuinit lapic_setup_esr(vo
 void __cpuinit end_local_APIC_setup(void)
 {
 	lapic_setup_esr();
-	nmi_watchdog_default();
 	setup_apic_nmi_watchdog(NULL);
 	apic_pm_activate();
 }
Index: linux-2.6.26/arch/x86/kernel/io_apic_64.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/io_apic_64.c
+++ linux-2.6.26/arch/x86/kernel/io_apic_64.c
@@ -1732,7 +1732,6 @@ static inline void __init check_timer(vo
 		 */
 		unmask_IO_APIC_irq(0);
 		if (!no_timer_check && timer_irq_works()) {
-			nmi_watchdog_default();
 			if (nmi_watchdog == NMI_IO_APIC) {
 				disable_8259A_irq(0);
 				setup_nmi();
@@ -1758,7 +1757,6 @@ static inline void __init check_timer(vo
 		setup_ExtINT_IRQ0_pin(apic2, pin2, cfg->vector);
 		if (timer_irq_works()) {
 			apic_printk(APIC_VERBOSE," works.\n");
-			nmi_watchdog_default();
 			if (nmi_watchdog == NMI_IO_APIC) {
 				setup_nmi();
 			}
Index: linux-2.6.26/arch/x86/kernel/nmi_64.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/nmi_64.c
+++ linux-2.6.26/arch/x86/kernel/nmi_64.c
@@ -51,7 +51,7 @@ static unsigned int nmi_hz = 1000;
 static DEFINE_PER_CPU(short, wd_enabled);
 
 /* Run after command line and cpu_init init, but before all other checks */
-void nmi_watchdog_default(void)
+static void nmi_watchdog_default(void)
 {
 	if (nmi_watchdog != NMI_DEFAULT)
 		return;
Index: linux-2.6.26/arch/x86/kernel/smpboot.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/smpboot.c
+++ linux-2.6.26/arch/x86/kernel/smpboot.c
@@ -1190,7 +1190,6 @@ static void __init smp_cpu_index_default
 void __init native_smp_prepare_cpus(unsigned int max_cpus)
 {
 	preempt_disable();
-	nmi_watchdog_default();
 	smp_cpu_index_default();
 	current_cpu_data = boot_cpu_data;
 	cpu_callin_map = cpumask_of_cpu(0);
Index: linux-2.6.26/include/asm-x86/nmi.h
===================================================================
--- linux-2.6.26.orig/include/asm-x86/nmi.h
+++ linux-2.6.26/include/asm-x86/nmi.h
@@ -39,9 +39,6 @@ static inline void unset_nmi_pm_callback
 #ifdef CONFIG_X86_64
 extern void default_do_nmi(struct pt_regs *);
 extern void die_nmi(char *str, struct pt_regs *regs, int do_panic);
-extern void nmi_watchdog_default(void);
-#else
-#define nmi_watchdog_default() do {} while (0)
 #endif
 
 extern int check_nmi_watchdog(void);
