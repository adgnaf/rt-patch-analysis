 arch/x86/kernel/early_printk.c |    2 +-
 arch/x86/kernel/head64.c       |    6 +++++-
 arch/x86/kernel/i8259_64.c     |    2 +-
 arch/x86/kernel/io_apic_64.c   |   13 +++++++------
 arch/x86/kernel/nmi_64.c       |    2 ++
 arch/x86/kernel/process_64.c   |    9 ++++++---
 arch/x86/kernel/signal_64.c    |    7 +++++++
 arch/x86/kernel/smp.c          |   12 +++++++++++-
 arch/x86/kernel/tlb_64.c       |    2 +-
 arch/x86/kernel/traps_64.c     |    5 ++---
 include/asm-x86/acpi.h         |    4 ++--
 include/asm-x86/hw_irq_64.h    |    2 +-
 include/asm-x86/i8259.h        |    2 +-
 include/asm-x86/spinlock.h     |    6 +++---
 include/asm-x86/tlbflush.h     |    2 ++
 include/asm-x86/vgtod.h        |    2 +-
 16 files changed, 53 insertions(+), 25 deletions(-)

Index: linux-2.6.26/arch/x86/kernel/early_printk.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/early_printk.c
+++ linux-2.6.26/arch/x86/kernel/early_printk.c
@@ -198,7 +198,7 @@ static int early_console_initialized;
 
 void early_printk(const char *fmt, ...)
 {
-	char buf[512];
+	static char buf[512];
 	int n;
 	va_list ap;
 
Index: linux-2.6.26/arch/x86/kernel/head64.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/head64.c
+++ linux-2.6.26/arch/x86/kernel/head64.c
@@ -29,7 +29,11 @@ static void __init zap_identity_mappings
 {
 	pgd_t *pgd = pgd_offset_k(0UL);
 	pgd_clear(pgd);
-	__flush_tlb_all();
+	/*
+	 * preempt_disable/enable does not work this early in the
+	 * bootup yet:
+	 */
+	write_cr3(read_cr3());
 }
 
 /* Don't add a printk in there. printk relies on the PDA which is not initialized 
Index: linux-2.6.26/arch/x86/kernel/i8259_64.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/i8259_64.c
+++ linux-2.6.26/arch/x86/kernel/i8259_64.c
@@ -97,8 +97,8 @@ static void (*__initdata interrupt[NR_VE
  */
 
 static int i8259A_auto_eoi;
-DEFINE_SPINLOCK(i8259A_lock);
 static void mask_and_ack_8259A(unsigned int);
+DEFINE_RAW_SPINLOCK(i8259A_lock);
 
 static struct irq_chip i8259A_chip = {
 	.name		= "XT-PIC",
Index: linux-2.6.26/arch/x86/kernel/io_apic_64.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/io_apic_64.c
+++ linux-2.6.26/arch/x86/kernel/io_apic_64.c
@@ -95,8 +95,8 @@ int timer_over_8254 __initdata = 1;
 /* Where if anywhere is the i8259 connect in external int mode */
 static struct { int pin, apic; } ioapic_i8259 = { -1, -1 };
 
-static DEFINE_SPINLOCK(ioapic_lock);
-DEFINE_SPINLOCK(vector_lock);
+static DEFINE_RAW_SPINLOCK(ioapic_lock);
+DEFINE_RAW_SPINLOCK(vector_lock);
 
 /*
  * # of IRQ routing registers
@@ -222,6 +222,9 @@ static inline void io_apic_sync(unsigned
 		reg ACTION;						\
 		io_apic_modify(entry->apic, reg);			\
 		FINAL;							\
+		 /* Force POST flush by reading: */			\
+		reg = io_apic_read(entry->apic, 0x10 + R + pin*2);	\
+									\
 		if (!entry->next)					\
 			break;						\
 		entry = irq_2_pin + entry->next;			\
@@ -366,10 +369,8 @@ static void add_pin_to_irq(unsigned int 
 	static void name##_IO_APIC_irq (unsigned int irq)		\
 	__DO_ACTION(R, ACTION, FINAL)
 
-DO_ACTION( __mask,             0, |= 0x00010000, io_apic_sync(entry->apic) )
-						/* mask = 1 */
-DO_ACTION( __unmask,           0, &= 0xfffeffff, )
-						/* mask = 0 */
+DO_ACTION( __mask,             0, |= 0x00010000, ) /* mask = 1 */
+DO_ACTION( __unmask,           0, &= 0xfffeffff, ) /* mask = 0 */
 
 DO_ACTION( __pcix_mask,   0, &= 0xffff7fff, ) /* edge */
 DO_ACTION( __pcix_unmask, 0, = (reg & 0xfffeffff) | 0x00008000, ) /* level */
Index: linux-2.6.26/arch/x86/kernel/nmi_64.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/nmi_64.c
+++ linux-2.6.26/arch/x86/kernel/nmi_64.c
@@ -67,7 +67,9 @@ static int endflag __initdata = 0;
  */
 static __init void nmi_cpu_busy(void *data)
 {
+#ifndef CONFIG_PREEMPT_RT
 	local_irq_enable_in_hardirq();
+#endif
 	/* Intentionally don't use cpu_relax here. This is
 	   to make sure that the performance counter really ticks,
 	   even if there is a simulator or similar that catches the
Index: linux-2.6.26/arch/x86/kernel/process_64.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/process_64.c
+++ linux-2.6.26/arch/x86/kernel/process_64.c
@@ -176,9 +176,11 @@ void cpu_idle(void)
 		}
 
 		tick_nohz_restart_sched_tick();
-		preempt_enable_no_resched();
-		schedule();
+		local_irq_disable();
+		__preempt_enable_no_resched();
+		__schedule();
 		preempt_disable();
+		local_irq_enable();
 	}
 }
 
@@ -258,7 +260,7 @@ void exit_thread(void)
 	struct thread_struct *t = &me->thread;
 
 	if (me->thread.io_bitmap_ptr) {
-		struct tss_struct *tss = &per_cpu(init_tss, get_cpu());
+		struct tss_struct *tss;
 
 		kfree(t->io_bitmap_ptr);
 		t->io_bitmap_ptr = NULL;
@@ -266,6 +268,7 @@ void exit_thread(void)
 		/*
 		 * Careful, clear this in the TSS too:
 		 */
+		tss = &per_cpu(init_tss, get_cpu());
 		memset(tss->io_bitmap, 0xff, t->io_bitmap_max);
 		t->io_bitmap_max = 0;
 		put_cpu();
Index: linux-2.6.26/arch/x86/kernel/signal_64.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/signal_64.c
+++ linux-2.6.26/arch/x86/kernel/signal_64.c
@@ -417,6 +417,13 @@ static void do_signal(struct pt_regs *re
 	int signr;
 	sigset_t *oldset;
 
+#ifdef CONFIG_PREEMPT_RT
+	/*
+	 * Fully-preemptible kernel does not need interrupts disabled:
+	 */
+	local_irq_enable();
+	preempt_check_resched();
+#endif
 	/*
 	 * We want the common case to go fast, which is why we may in certain
 	 * cases get here from kernel mode. Just return without doing anything
Index: linux-2.6.26/arch/x86/kernel/smp.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/smp.c
+++ linux-2.6.26/arch/x86/kernel/smp.c
@@ -122,10 +122,20 @@ static void native_smp_send_reschedule(i
 }
 
 /*
+ * this function sends a 'reschedule' IPI to all other CPUs.
+ * This is used when RT tasks are starving and other CPUs
+ * might be able to run them:
+ */
+void smp_send_reschedule_allbutself(void)
+{
+	send_IPI_allbutself(RESCHEDULE_VECTOR);
+}
+
+/*
  * Structure and data for smp_call_function(). This is designed to minimise
  * static memory requirements. It also looks cleaner.
  */
-static DEFINE_SPINLOCK(call_lock);
+static DEFINE_RAW_SPINLOCK(call_lock);
 
 struct call_data_struct {
 	void (*func) (void *info);
Index: linux-2.6.26/arch/x86/kernel/tlb_64.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/tlb_64.c
+++ linux-2.6.26/arch/x86/kernel/tlb_64.c
@@ -44,7 +44,7 @@ union smp_flush_state {
 		cpumask_t flush_cpumask;
 		struct mm_struct *flush_mm;
 		unsigned long flush_va;
-		spinlock_t tlbstate_lock;
+		raw_spinlock_t tlbstate_lock;
 	};
 	char pad[SMP_CACHE_BYTES];
 } ____cacheline_aligned;
Index: linux-2.6.26/arch/x86/kernel/traps_64.c
===================================================================
--- linux-2.6.26.orig/arch/x86/kernel/traps_64.c
+++ linux-2.6.26/arch/x86/kernel/traps_64.c
@@ -263,7 +263,7 @@ void dump_trace(struct task_struct *tsk,
 		unsigned long *stack, unsigned long bp,
 		const struct stacktrace_ops *ops, void *data)
 {
-	const unsigned cpu = get_cpu();
+	const unsigned cpu = raw_smp_processor_id();
 	unsigned long *irqstack_end = (unsigned long*)cpu_pda(cpu)->irqstackptr;
 	unsigned used = 0;
 	struct thread_info *tinfo;
@@ -347,7 +347,6 @@ void dump_trace(struct task_struct *tsk,
 	 * This handles the process stack:
 	 */
 	bp = print_context_stack(tinfo, stack, bp, ops, data, NULL);
-	put_cpu();
 }
 EXPORT_SYMBOL(dump_trace);
 
@@ -399,7 +398,7 @@ _show_stack(struct task_struct *tsk, str
 {
 	unsigned long *stack;
 	int i;
-	const int cpu = smp_processor_id();
+	const int cpu = raw_smp_processor_id();
 	unsigned long *irqstack_end = (unsigned long *) (cpu_pda(cpu)->irqstackptr);
 	unsigned long *irqstack = (unsigned long *) (cpu_pda(cpu)->irqstackptr - IRQSTACKSIZE);
 
Index: linux-2.6.26/include/asm-x86/acpi.h
===================================================================
--- linux-2.6.26.orig/include/asm-x86/acpi.h
+++ linux-2.6.26/include/asm-x86/acpi.h
@@ -49,8 +49,8 @@
 
 #define ACPI_ASM_MACROS
 #define BREAKPOINT3
-#define ACPI_DISABLE_IRQS() local_irq_disable()
-#define ACPI_ENABLE_IRQS()  local_irq_enable()
+#define ACPI_DISABLE_IRQS() local_irq_disable_nort()
+#define ACPI_ENABLE_IRQS()  local_irq_enable_nort()
 #define ACPI_FLUSH_CPU_CACHE()	wbinvd()
 
 int __acpi_acquire_global_lock(unsigned int *lock);
Index: linux-2.6.26/include/asm-x86/hw_irq_64.h
===================================================================
--- linux-2.6.26.orig/include/asm-x86/hw_irq_64.h
+++ linux-2.6.26/include/asm-x86/hw_irq_64.h
@@ -118,7 +118,7 @@ void i8254_timer_resume(void);
 typedef int vector_irq_t[NR_VECTORS];
 DECLARE_PER_CPU(vector_irq_t, vector_irq);
 extern void __setup_vector_irq(int cpu);
-extern spinlock_t vector_lock;
+extern raw_spinlock_t vector_lock;
 
 /*
  * Various low-level irq details needed by irq.c, process.c,
Index: linux-2.6.26/include/asm-x86/i8259.h
===================================================================
--- linux-2.6.26.orig/include/asm-x86/i8259.h
+++ linux-2.6.26/include/asm-x86/i8259.h
@@ -24,7 +24,7 @@ extern unsigned int cached_irq_mask;
 #define SLAVE_ICW4_DEFAULT	0x01
 #define PIC_ICW4_AEOI		2
 
-extern spinlock_t i8259A_lock;
+extern raw_spinlock_t i8259A_lock;
 
 extern void init_8259A(int auto_eoi);
 extern void enable_8259A_irq(unsigned int irq);
Index: linux-2.6.26/include/asm-x86/spinlock.h
===================================================================
--- linux-2.6.26.orig/include/asm-x86/spinlock.h
+++ linux-2.6.26/include/asm-x86/spinlock.h
@@ -274,8 +274,8 @@ static inline void __raw_write_unlock(__
 		     : "+m" (rw->lock) : "i" (RW_LOCK_BIAS) : "memory");
 }
 
-#define _raw_spin_relax(lock)	cpu_relax()
-#define _raw_read_relax(lock)	cpu_relax()
-#define _raw_write_relax(lock)	cpu_relax()
+#define __raw_spin_relax(lock)	cpu_relax()
+#define __raw_read_relax(lock)	cpu_relax()
+#define __raw_write_relax(lock)	cpu_relax()
 
 #endif
Index: linux-2.6.26/include/asm-x86/tlbflush.h
===================================================================
--- linux-2.6.26.orig/include/asm-x86/tlbflush.h
+++ linux-2.6.26/include/asm-x86/tlbflush.h
@@ -17,7 +17,9 @@
 
 static inline void __native_flush_tlb(void)
 {
+	preempt_disable();
 	write_cr3(read_cr3());
+	preempt_enable();
 }
 
 static inline void __native_flush_tlb_global(void)
Index: linux-2.6.26/include/asm-x86/vgtod.h
===================================================================
--- linux-2.6.26.orig/include/asm-x86/vgtod.h
+++ linux-2.6.26/include/asm-x86/vgtod.h
@@ -5,7 +5,7 @@
 #include <linux/clocksource.h>
 
 struct vsyscall_gtod_data {
-	seqlock_t	lock;
+	raw_seqlock_t	lock;
 
 	/* open coded 'struct timespec' */
 	time_t		wall_time_sec;
