From h-shimamoto@ct.jp.nec.com Thu May 15 10:15:22 2008
Date: Mon, 28 Apr 2008 11:19:21 -0700
From: Hiroshi Shimamoto <h-shimamoto@ct.jp.nec.com>
To: Ingo Molnar <mingo@elte.hu>, Steven Rostedt <rostedt@goodmis.org>,
     Thomas Gleixner <tglx@linutronix.de>
Cc: linux-kernel@vger.kernel.org, linux-rt-users@vger.kernel.org
Subject: [PATCH -rt 4/4] wait for finish show_regs() before panic

From: Hiroshi Shimamoto <h-shimamoto@ct.jp.nec.com>

It might cause kdump failure that the kernel doesn't wait for finish
show_regs(). The nmi_show_regs variable for show_regs() flag is cleared
before show_regs() is really called. This flag should be cleared after
show_regs().
kdump stops all CPUs other than crashing CPU by NMI handler, but if
show_regs() takes a bit time, kdump cannot wait and will continue process.
It means that the 2nd kernel and the old kernel run simultaneously and it
might cause unexpected behavior, such as randomly reboot.

Signed-off-by: Hiroshi Shimamoto <h-shimamoto@ct.jp.nec.com>
Signed-off-by: Maxim Uvarov <muvarov@ru.mvista.com>
---
 arch/x86/kernel/nmi_32.c |    2 +-
 arch/x86/kernel/nmi_64.c |    2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

Index: linux-2.6.25.4-rt1/arch/x86/kernel/nmi_32.c
===================================================================
--- linux-2.6.25.4-rt1.orig/arch/x86/kernel/nmi_32.c	2008-05-17 08:28:15.000000000 -0400
+++ linux-2.6.25.4-rt1/arch/x86/kernel/nmi_32.c	2008-05-17 08:28:15.000000000 -0400
@@ -354,13 +354,13 @@ notrace int irq_show_regs_callback(int c
 	if (!nmi_show_regs[cpu])
 		return 0;
 
-	nmi_show_regs[cpu] = 0;
 	spin_lock(&nmi_print_lock);
 	printk(KERN_WARNING "NMI show regs on CPU#%d:\n", cpu);
 	printk(KERN_WARNING "apic_timer_irqs: %d\n",
 		per_cpu(irq_stat, cpu).apic_timer_irqs);
 	show_regs(regs);
 	spin_unlock(&nmi_print_lock);
+	nmi_show_regs[cpu] = 0;
 	return 1;
 }
 
Index: linux-2.6.25.4-rt1/arch/x86/kernel/nmi_64.c
===================================================================
--- linux-2.6.25.4-rt1.orig/arch/x86/kernel/nmi_64.c	2008-05-17 08:28:15.000000000 -0400
+++ linux-2.6.25.4-rt1/arch/x86/kernel/nmi_64.c	2008-05-17 08:28:15.000000000 -0400
@@ -342,12 +342,12 @@ notrace int irq_show_regs_callback(int c
 	if (!nmi_show_regs[cpu])
 		return 0;
 
-	nmi_show_regs[cpu] = 0;
 	spin_lock(&nmi_print_lock);
 	printk(KERN_WARNING "NMI show regs on CPU#%d:\n", cpu);
 	printk(KERN_WARNING "apic_timer_irqs: %d\n", read_pda(apic_timer_irqs));
 	show_regs(regs);
 	spin_unlock(&nmi_print_lock);
+	nmi_show_regs[cpu] = 0;
 	return 1;
 }
 
