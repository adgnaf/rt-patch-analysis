---
 drivers/net/usb/usbnet.c   |    2 ++
 drivers/usb/core/devio.c   |    5 +++--
 drivers/usb/core/message.c |   13 +++++++------
 3 files changed, 12 insertions(+), 8 deletions(-)

Index: linux-2.6.25.4-rt1/drivers/net/usb/usbnet.c
===================================================================
--- linux-2.6.25.4-rt1.orig/drivers/net/usb/usbnet.c	2008-05-17 08:26:18.000000000 -0400
+++ linux-2.6.25.4-rt1/drivers/net/usb/usbnet.c	2008-05-17 08:27:39.000000000 -0400
@@ -904,6 +904,8 @@ static void tx_complete (struct urb *urb
 
 	urb->dev = NULL;
 	entry->state = tx_done;
+	spin_lock_rt(&dev->txq.lock);
+	spin_unlock_rt(&dev->txq.lock);
 	defer_bh(dev, skb, &dev->txq);
 }
 
Index: linux-2.6.25.4-rt1/drivers/usb/core/devio.c
===================================================================
--- linux-2.6.25.4-rt1.orig/drivers/usb/core/devio.c	2008-05-17 08:26:18.000000000 -0400
+++ linux-2.6.25.4-rt1/drivers/usb/core/devio.c	2008-05-17 08:27:39.000000000 -0400
@@ -311,10 +311,11 @@ static void async_completed(struct urb *
 	struct async *as = urb->context;
 	struct dev_state *ps = as->ps;
 	struct siginfo sinfo;
+	unsigned long flags;
 
-	spin_lock(&ps->lock);
+	spin_lock_irqsave(&ps->lock, flags);
 	list_move_tail(&as->asynclist, &ps->async_completed);
-	spin_unlock(&ps->lock);
+	spin_unlock_irqrestore(&ps->lock, flags);
 	as->status = urb->status;
 	if (as->signr) {
 		sinfo.si_signo = as->signr;
Index: linux-2.6.25.4-rt1/drivers/usb/core/message.c
===================================================================
--- linux-2.6.25.4-rt1.orig/drivers/usb/core/message.c	2008-05-17 08:26:18.000000000 -0400
+++ linux-2.6.25.4-rt1/drivers/usb/core/message.c	2008-05-17 08:27:39.000000000 -0400
@@ -266,8 +266,9 @@ static void sg_complete(struct urb *urb)
 {
 	struct usb_sg_request *io = urb->context;
 	int status = urb->status;
+	unsigned long flags;
 
-	spin_lock(&io->lock);
+	spin_lock_irqsave (&io->lock, flags);
 
 	/* In 2.5 we require hcds' endpoint queues not to progress after fault
 	 * reports, until the completion callback (this!) returns.  That lets
@@ -301,7 +302,7 @@ static void sg_complete(struct urb *urb)
 		 * unlink pending urbs so they won't rx/tx bad data.
 		 * careful: unlink can sometimes be synchronous...
 		 */
-		spin_unlock(&io->lock);
+		spin_unlock_irqrestore (&io->lock, flags);
 		for (i = 0, found = 0; i < io->entries; i++) {
 			if (!io->urbs [i] || !io->urbs [i]->dev)
 				continue;
@@ -316,7 +317,7 @@ static void sg_complete(struct urb *urb)
 			} else if (urb == io->urbs [i])
 				found = 1;
 		}
-		spin_lock(&io->lock);
+		spin_lock_irqsave (&io->lock, flags);
 	}
 	urb->dev = NULL;
 
@@ -326,7 +327,7 @@ static void sg_complete(struct urb *urb)
 	if (!io->count)
 		complete(&io->complete);
 
-	spin_unlock(&io->lock);
+	spin_unlock_irqrestore (&io->lock, flags);
 }
 
 
@@ -591,7 +592,7 @@ void usb_sg_cancel(struct usb_sg_request
 		int i;
 
 		io->status = -ECONNRESET;
-		spin_unlock(&io->lock);
+		spin_unlock_irqrestore(&io->lock, flags);
 		for (i = 0; i < io->entries; i++) {
 			int retval;
 
@@ -602,7 +603,7 @@ void usb_sg_cancel(struct usb_sg_request
 				dev_warn(&io->dev->dev, "%s, unlink --> %d\n",
 					__FUNCTION__, retval);
 		}
-		spin_lock(&io->lock);
+		spin_lock_irqsave (&io->lock, flags);
 	}
 	spin_unlock_irqrestore(&io->lock, flags);
 }
