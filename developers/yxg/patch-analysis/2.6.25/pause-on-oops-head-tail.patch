Subject: [patch] introduce pause_on_oops_head/tail boot options
From: Ingo Molnar <mingo@elte.hu>

if a system crashes with hard to debug oopses which scroll off the
screen then it's useful to stop the crash right after the register
info or right after the callback printout.

Signed-off-by: Ingo Molnar <mingo@elte.hu>
---
 arch/x86/kernel/traps_32.c |    6 +++++
 arch/x86/kernel/traps_64.c |    2 +
 include/linux/kernel.h     |    4 +++
 kernel/panic.c             |   49 ++++++++++++++++++++++++++++++++++++++++++++-
 4 files changed, 60 insertions(+), 1 deletion(-)

Index: linux-2.6.25.4-rt1/arch/x86/kernel/traps_32.c
===================================================================
--- linux-2.6.25.4-rt1.orig/arch/x86/kernel/traps_32.c	2008-05-17 08:27:31.000000000 -0400
+++ linux-2.6.25.4-rt1/arch/x86/kernel/traps_32.c	2008-05-17 08:27:51.000000000 -0400
@@ -287,9 +287,15 @@ static void show_stack_log_lvl(struct ta
 			printk("\n%s       ", log_lvl);
 		printk("%08lx ", *stack++);
 	}
+
+	pause_on_oops_head();
+
 	printk("\n%sCall Trace:\n", log_lvl);
 	show_trace_log_lvl(task, regs, sp, bp, log_lvl);
 	debug_show_held_locks(task);
+
+	pause_on_oops_tail();
+
 }
 
 void show_stack(struct task_struct *task, unsigned long *sp)
Index: linux-2.6.25.4-rt1/arch/x86/kernel/traps_64.c
===================================================================
--- linux-2.6.25.4-rt1.orig/arch/x86/kernel/traps_64.c	2008-05-17 08:27:27.000000000 -0400
+++ linux-2.6.25.4-rt1/arch/x86/kernel/traps_64.c	2008-05-17 08:27:51.000000000 -0400
@@ -384,10 +384,12 @@ void
 show_trace(struct task_struct *tsk, struct pt_regs *regs, unsigned long *stack,
 		unsigned long bp)
 {
+	pause_on_oops_head();
 	printk("\nCall Trace:\n");
 	dump_trace(tsk, regs, stack, bp, &print_trace_ops, NULL);
 	printk("\n");
 	debug_show_held_locks(tsk);
+	pause_on_oops_tail();
 	print_preempt_trace(tsk);
 }
 
Index: linux-2.6.25.4-rt1/include/linux/kernel.h
===================================================================
--- linux-2.6.25.4-rt1.orig/include/linux/kernel.h	2008-05-17 08:27:34.000000000 -0400
+++ linux-2.6.25.4-rt1/include/linux/kernel.h	2008-05-17 08:27:51.000000000 -0400
@@ -242,6 +242,10 @@ extern void wake_up_klogd(void);
 extern int oops_in_progress;		/* If set, an oops, panic(), BUG() or die() is in progress */
 extern int panic_timeout;
 extern int panic_on_oops;
+
+extern void pause_on_oops_head(void);
+extern void pause_on_oops_tail(void);
+
 extern int panic_on_unrecovered_nmi;
 extern int tainted;
 extern const char *print_tainted(void);
Index: linux-2.6.25.4-rt1/kernel/panic.c
===================================================================
--- linux-2.6.25.4-rt1.orig/kernel/panic.c	2008-05-17 08:27:42.000000000 -0400
+++ linux-2.6.25.4-rt1/kernel/panic.c	2008-05-17 08:27:51.000000000 -0400
@@ -28,7 +28,38 @@ static int pause_on_oops;
 static int pause_on_oops_flag;
 static DEFINE_SPINLOCK(pause_on_oops_lock);
 
-int panic_timeout;
+/*
+ * Debugging helper: freeze all console output after printing the
+ * first oops's head (or tail):
+ */
+static int pause_on_oops_head_flag = 0;
+static int pause_on_oops_tail_flag = 0;
+
+static void pause_on_oops_loop(int flag)
+{
+	switch (flag) {
+	default:
+		break;
+	case 1:
+		for (;;)
+			local_irq_disable();
+	case 2:
+		for (;;)
+			local_irq_enable();
+	}
+}
+
+void pause_on_oops_head(void)
+{
+	pause_on_oops_loop(pause_on_oops_head_flag);
+}
+
+void pause_on_oops_tail(void)
+{
+	pause_on_oops_loop(pause_on_oops_tail_flag);
+}
+
+int panic_timeout __read_mostly;
 
 ATOMIC_NOTIFIER_HEAD(panic_notifier_list);
 
@@ -192,6 +223,22 @@ static int __init pause_on_oops_setup(ch
 }
 __setup("pause_on_oops=", pause_on_oops_setup);
 
+static int __init pause_on_oops_head_setup(char *str)
+{
+	pause_on_oops_head_flag = simple_strtoul(str, NULL, 0);
+	printk(KERN_INFO "pause_on_oops_head: %d\n", pause_on_oops_head_flag);
+	return 1;
+}
+__setup("pause_on_oops_head=", pause_on_oops_head_setup);
+
+static int __init pause_on_oops_tail_setup(char *str)
+{
+	pause_on_oops_tail_flag = simple_strtoul(str, NULL, 0);
+	printk(KERN_INFO "pause_on_oops_tail: %d\n", pause_on_oops_tail_flag);
+	return 1;
+}
+__setup("pause_on_oops_tail=", pause_on_oops_tail_setup);
+
 static void spin_msec(int msecs)
 {
 	int i;
