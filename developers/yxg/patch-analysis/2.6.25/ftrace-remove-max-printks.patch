From: Steven Rostedt <srostedt@redhat.com>
Subject: ftrace: remove printks from max hit

The wakeup and irqsoff traces when hitting a new max should not be doing
a printk. This may cause race issues with the scheduler locks.

Signed-off-by: Steven Rostedt <srostedt@redhat.com>
---
 kernel/trace/trace_irqsoff.c      |   14 --------------
 kernel/trace/trace_sched_wakeup.c |   13 -------------
 2 files changed, 27 deletions(-)

Index: linux-2.6.24.7-rt5/kernel/trace/trace_irqsoff.c
===================================================================
--- linux-2.6.24.7-rt5.orig/kernel/trace/trace_irqsoff.c	2008-05-15 11:19:59.000000000 -0400
+++ linux-2.6.24.7-rt5/kernel/trace/trace_irqsoff.c	2008-05-15 11:43:24.000000000 -0400
@@ -166,20 +166,6 @@ check_critical_timing(struct trace_array
 
 	update_max_tr_single(tr, current, cpu);
 
-	if (tracing_thresh) {
-		printk(KERN_INFO "(%16s-%-5d|#%d):"
-			" %lu us critical section violates %lu us threshold.\n",
-				current->comm, current->pid,
-				raw_smp_processor_id(),
-				latency, nsecs_to_usecs(tracing_thresh));
-	} else {
-		printk(KERN_INFO "(%16s-%-5d|#%d):"
-		       " new %lu us maximum-latency critical section.\n",
-				current->comm, current->pid,
-				raw_smp_processor_id(),
-				latency);
-	}
-
 	max_sequence++;
 
 out_unlock:
Index: linux-2.6.24.7-rt5/kernel/trace/trace_sched_wakeup.c
===================================================================
--- linux-2.6.24.7-rt5.orig/kernel/trace/trace_sched_wakeup.c	2008-05-15 11:19:59.000000000 -0400
+++ linux-2.6.24.7-rt5/kernel/trace/trace_sched_wakeup.c	2008-05-15 11:43:34.000000000 -0400
@@ -109,19 +109,6 @@ wakeup_sched_switch(struct task_struct *
 
 	update_max_tr(tr, wakeup_task, wakeup_cpu);
 
-	if (tracing_thresh) {
-		printk(KERN_INFO "(%16s-%-5d|#%d):"
-			" %lu us wakeup latency violates %lu us threshold.\n",
-				wakeup_task->comm, wakeup_task->pid,
-				raw_smp_processor_id(),
-				latency, nsecs_to_usecs(tracing_thresh));
-	} else {
-		printk(KERN_INFO "(%16s-%-5d|#%d):"
-			" new %lu us maximum wakeup latency.\n",
-				wakeup_task->comm, wakeup_task->pid,
-				cpu, latency);
-	}
-
 out_unlock:
 	__wakeup_reset(tr);
 	spin_unlock_irqrestore(&wakeup_lock, flags);
