From: Arnaldo Carvalho de Melo <acme@redhat.com>
Subject: [PATCH] Cache calls to pci_find_capability


The problem here is that everytime do_irqd masks/unmasks MSI interrupts
it would ask if the device has the MSI capability, and that involves
multiple calls to pci_conf1_read, that can take as high as 44us in
in/out calls, so I just cached results in struct pci_dev.

With this patch the highest latency still is in masking/unmasking MSI
interrupts, but its down to 159us in a kernel with ftrace, using the
preemptirqsoff tracer:


I showed it to Jesse Barnes, the PCI maintainer and he said its 2.6.27
material, and Rostedt said tglx is OK with it, so please add it to the
-50 kernel-rt release.

Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

---
 drivers/pci/msi.c        |   12 ++++++------
 drivers/pci/pci.c        |   36 ++++++++++++++++++++++++++++++++++++
 drivers/pci/probe.c      |    4 ++++
 include/linux/pci.h      |    6 ++++++
 include/linux/pci_regs.h |    1 +
 5 files changed, 53 insertions(+), 6 deletions(-)

Index: linux-2.6.25.4-rt1/drivers/pci/msi.c
===================================================================
--- linux-2.6.25.4-rt1.orig/drivers/pci/msi.c	2008-05-17 08:27:01.000000000 -0400
+++ linux-2.6.25.4-rt1/drivers/pci/msi.c	2008-05-17 08:28:14.000000000 -0400
@@ -75,7 +75,7 @@ static void msi_set_enable(struct pci_de
 	int pos;
 	u16 control;
 
-	pos = pci_find_capability(dev, PCI_CAP_ID_MSI);
+	pos = pci_find_capability_cached(dev, PCI_CAP_ID_MSI);
 	if (pos) {
 		pci_read_config_word(dev, pos + PCI_MSI_FLAGS, &control);
 		control &= ~PCI_MSI_FLAGS_ENABLE;
@@ -90,7 +90,7 @@ static void msix_set_enable(struct pci_d
 	int pos;
 	u16 control;
 
-	pos = pci_find_capability(dev, PCI_CAP_ID_MSIX);
+	pos = pci_find_capability_cached(dev, PCI_CAP_ID_MSIX);
 	if (pos) {
 		pci_read_config_word(dev, pos + PCI_MSIX_FLAGS, &control);
 		control &= ~PCI_MSIX_FLAGS_ENABLE;
@@ -355,7 +355,7 @@ static int msi_capability_init(struct pc
 
 	msi_set_enable(dev, 0);	/* Ensure msi is disabled as I set it up */
 
-   	pos = pci_find_capability(dev, PCI_CAP_ID_MSI);
+   	pos = pci_find_capability_cached(dev, PCI_CAP_ID_MSI);
 	pci_read_config_word(dev, msi_control_reg(pos), &control);
 	/* MSI Entry Initialization */
 	entry = alloc_msi_entry();
@@ -428,7 +428,7 @@ static int msix_capability_init(struct p
 
 	msix_set_enable(dev, 0);/* Ensure msix is disabled as I set it up */
 
-   	pos = pci_find_capability(dev, PCI_CAP_ID_MSIX);
+   	pos = pci_find_capability_cached(dev, PCI_CAP_ID_MSIX);
 	/* Request & Map MSI-X table region */
  	pci_read_config_word(dev, msi_control_reg(pos), &control);
 	nr_entries = multi_msix_capable(control);
@@ -535,7 +535,7 @@ static int pci_msi_check_device(struct p
 	if (ret)
 		return ret;
 
-	if (!pci_find_capability(dev, type))
+	if (!pci_find_capability_cached(dev, type))
 		return -EINVAL;
 
 	return 0;
@@ -654,7 +654,7 @@ int pci_enable_msix(struct pci_dev* dev,
 	if (status)
 		return status;
 
-	pos = pci_find_capability(dev, PCI_CAP_ID_MSIX);
+	pos = pci_find_capability_cached(dev, PCI_CAP_ID_MSIX);
 	pci_read_config_word(dev, msi_control_reg(pos), &control);
 	nr_entries = multi_msix_capable(control);
 	if (nvec > nr_entries)
Index: linux-2.6.25.4-rt1/drivers/pci/pci.c
===================================================================
--- linux-2.6.25.4-rt1.orig/drivers/pci/pci.c	2008-05-17 08:26:03.000000000 -0400
+++ linux-2.6.25.4-rt1/drivers/pci/pci.c	2008-05-17 08:28:14.000000000 -0400
@@ -170,6 +170,42 @@ int pci_find_capability(struct pci_dev *
 }
 
 /**
+ * pci_find_capability_cached - query for devices' capabilities, cached version
+ * @dev: PCI device to query
+ * @cap: capability code
+ *
+ * Tell if a device supports a given PCI capability.
+ * Returns the address of the requested capability structure within the
+ * device's PCI configuration space or 0 in case the device does not
+ * support it.  Possible values for @cap:
+ *
+ *  %PCI_CAP_ID_PM           Power Management
+ *  %PCI_CAP_ID_AGP          Accelerated Graphics Port
+ *  %PCI_CAP_ID_VPD          Vital Product Data
+ *  %PCI_CAP_ID_SLOTID       Slot Identification
+ *  %PCI_CAP_ID_MSI          Message Signalled Interrupts
+ *  %PCI_CAP_ID_CHSWP        CompactPCI HotSwap
+ *  %PCI_CAP_ID_PCIX         PCI-X
+ *  %PCI_CAP_ID_EXP          PCI Express
+ */
+int pci_find_capability_cached(struct pci_dev *dev, int cap)
+{
+       int pos = 0;
+
+       WARN_ON_ONCE(cap <= 0 || cap > PCI_CAP_LIST_NR_ENTRIES);
+
+       if (cap <= PCI_CAP_LIST_NR_ENTRIES) {
+               const int i = cap - 1;
+               if (dev->cached_capabilities[i] == -1)
+                       dev->cached_capabilities[i] = pci_find_capability(dev, cap);
+
+               pos = dev->cached_capabilities[i];
+       }
+
+       return pos;
+}
+
+/**
  * pci_bus_find_capability - query for devices' capabilities 
  * @bus:   the PCI bus to query
  * @devfn: PCI device to query
Index: linux-2.6.25.4-rt1/drivers/pci/probe.c
===================================================================
--- linux-2.6.25.4-rt1.orig/drivers/pci/probe.c	2008-05-17 08:26:03.000000000 -0400
+++ linux-2.6.25.4-rt1/drivers/pci/probe.c	2008-05-17 08:28:14.000000000 -0400
@@ -843,6 +843,7 @@ static void pci_release_bus_bridge_dev(s
 
 struct pci_dev *alloc_pci_dev(void)
 {
+	int i;
 	struct pci_dev *dev;
 
 	dev = kzalloc(sizeof(struct pci_dev), GFP_KERNEL);
@@ -852,6 +853,9 @@ struct pci_dev *alloc_pci_dev(void)
 	INIT_LIST_HEAD(&dev->global_list);
 	INIT_LIST_HEAD(&dev->bus_list);
 
+	for (i = 0; i < ARRAY_SIZE(dev->cached_capabilities); ++i)
+		dev->cached_capabilities[i] = -1;
+
 	pci_msi_init_pci_dev(dev);
 
 	return dev;
Index: linux-2.6.25.4-rt1/include/linux/pci.h
===================================================================
--- linux-2.6.25.4-rt1.orig/include/linux/pci.h	2008-05-17 08:26:03.000000000 -0400
+++ linux-2.6.25.4-rt1/include/linux/pci.h	2008-05-17 08:28:14.000000000 -0400
@@ -190,6 +190,7 @@ struct pci_dev {
 	unsigned int	msix_enabled:1;
 	unsigned int	is_managed:1;
 	unsigned int	is_pcie:1;
+	int             cached_capabilities[PCI_CAP_LIST_NR_ENTRIES]; /* See pci_find_capability_cached */
 	pci_dev_flags_t dev_flags;
 	atomic_t	enable_cnt;	/* pci_enable_device has been called */
 
@@ -509,6 +510,7 @@ struct pci_dev __deprecated *pci_find_sl
 #endif /* CONFIG_PCI_LEGACY */
 
 int pci_find_capability(struct pci_dev *dev, int cap);
+int pci_find_capability_cached(struct pci_dev *dev, int cap);
 int pci_find_next_capability(struct pci_dev *dev, u8 pos, int cap);
 int pci_find_ext_capability(struct pci_dev *dev, int cap);
 int pci_find_ht_capability(struct pci_dev *dev, int ht_cap);
@@ -872,6 +874,10 @@ static inline int pci_find_capability(st
 	return 0;
 }
 
+static inline int pci_find_capability_cached(struct pci_dev *dev, int cap) {
+	return 0;
+}
+
 static inline int pci_find_next_capability(struct pci_dev *dev, u8 post,
 					   int cap)
 {
Index: linux-2.6.25.4-rt1/include/linux/pci_regs.h
===================================================================
--- linux-2.6.25.4-rt1.orig/include/linux/pci_regs.h	2008-05-17 08:26:03.000000000 -0400
+++ linux-2.6.25.4-rt1/include/linux/pci_regs.h	2008-05-17 08:28:14.000000000 -0400
@@ -210,6 +210,7 @@
 #define  PCI_CAP_ID_AGP3	0x0E	/* AGP Target PCI-PCI bridge */
 #define  PCI_CAP_ID_EXP 	0x10	/* PCI Express */
 #define  PCI_CAP_ID_MSIX	0x11	/* MSI-X */
+#define PCI_CAP_LIST_NR_ENTRIES PCI_CAP_ID_MSIX
 #define PCI_CAP_LIST_NEXT	1	/* Next capability in the list */
 #define PCI_CAP_FLAGS		2	/* Capability defined flags (16 bits) */
 #define PCI_CAP_SIZEOF		4
