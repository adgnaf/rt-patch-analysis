Subject: [patch] x86_64: do not enable the NMI watchdog by default
From: Ingo Molnar <mingo@elte.hu>

do not enable the NMI watchdog by default. Now that we have
lockdep i cannot remember the last time it caught a real bug,
but the NMI watchdog can /cause/ problems. Furthermore, to the
typical user, an NMI watchdog assert results in a total lockup
anyway (if under X). In that sense, all that the NMI watchdog
does is that it makes the system /less/ stable and /less/
debuggable.

people can still enable it either after bootup via:

   echo 1 > /proc/sys/kernel/nmi

or via the nmi_watchdog=1 or nmi_watchdog=2 boot options.

build and boot tested on an Athlon64 box.

Signed-off-by: Ingo Molnar <mingo@elte.hu>
---
 arch/x86/kernel/apic_64.c    |    1 -
 arch/x86/kernel/io_apic_64.c |    2 --
 arch/x86/kernel/nmi_64.c     |    2 +-
 arch/x86/kernel/smpboot_64.c |    1 -
 include/asm-x86/nmi_64.h     |    2 --
 5 files changed, 1 insertion(+), 7 deletions(-)

Index: linux-2.6.25.4-rt1/arch/x86/kernel/apic_64.c
===================================================================
--- linux-2.6.25.4-rt1.orig/arch/x86/kernel/apic_64.c	2008-05-17 08:26:17.000000000 -0400
+++ linux-2.6.25.4-rt1/arch/x86/kernel/apic_64.c	2008-05-17 08:27:42.000000000 -0400
@@ -838,7 +838,6 @@ void __cpuinit lapic_setup_esr(void)
 void __cpuinit end_local_APIC_setup(void)
 {
 	lapic_setup_esr();
-	nmi_watchdog_default();
 	setup_apic_nmi_watchdog(NULL);
 	apic_pm_activate();
 }
Index: linux-2.6.25.4-rt1/arch/x86/kernel/io_apic_64.c
===================================================================
--- linux-2.6.25.4-rt1.orig/arch/x86/kernel/io_apic_64.c	2008-05-17 08:27:27.000000000 -0400
+++ linux-2.6.25.4-rt1/arch/x86/kernel/io_apic_64.c	2008-05-17 08:27:42.000000000 -0400
@@ -1734,7 +1734,6 @@ static inline void __init check_timer(vo
 		 */
 		unmask_IO_APIC_irq(0);
 		if (!no_timer_check && timer_irq_works()) {
-			nmi_watchdog_default();
 			if (nmi_watchdog == NMI_IO_APIC) {
 				disable_8259A_irq(0);
 				setup_nmi();
@@ -1760,7 +1759,6 @@ static inline void __init check_timer(vo
 		setup_ExtINT_IRQ0_pin(apic2, pin2, cfg->vector);
 		if (timer_irq_works()) {
 			apic_printk(APIC_VERBOSE," works.\n");
-			nmi_watchdog_default();
 			if (nmi_watchdog == NMI_IO_APIC) {
 				setup_nmi();
 			}
Index: linux-2.6.25.4-rt1/arch/x86/kernel/nmi_64.c
===================================================================
--- linux-2.6.25.4-rt1.orig/arch/x86/kernel/nmi_64.c	2008-05-17 08:27:41.000000000 -0400
+++ linux-2.6.25.4-rt1/arch/x86/kernel/nmi_64.c	2008-05-17 08:27:42.000000000 -0400
@@ -49,7 +49,7 @@ static unsigned int nmi_hz = 1000;
 static DEFINE_PER_CPU(short, wd_enabled);
 
 /* Run after command line and cpu_init init, but before all other checks */
-void nmi_watchdog_default(void)
+static void nmi_watchdog_default(void)
 {
 	if (nmi_watchdog != NMI_DEFAULT)
 		return;
Index: linux-2.6.25.4-rt1/arch/x86/kernel/smpboot_64.c
===================================================================
--- linux-2.6.25.4-rt1.orig/arch/x86/kernel/smpboot_64.c	2008-05-17 08:26:17.000000000 -0400
+++ linux-2.6.25.4-rt1/arch/x86/kernel/smpboot_64.c	2008-05-17 08:27:42.000000000 -0400
@@ -869,7 +869,6 @@ static void __init smp_cpu_index_default
  */
 void __init smp_prepare_cpus(unsigned int max_cpus)
 {
-	nmi_watchdog_default();
 	smp_cpu_index_default();
 	current_cpu_data = boot_cpu_data;
 	current_thread_info()->cpu = 0;  /* needed? */
Index: linux-2.6.25.4-rt1/include/asm-x86/nmi_64.h
===================================================================
--- linux-2.6.25.4-rt1.orig/include/asm-x86/nmi_64.h	2008-05-17 08:26:17.000000000 -0400
+++ linux-2.6.25.4-rt1/include/asm-x86/nmi_64.h	2008-05-17 08:27:42.000000000 -0400
@@ -55,8 +55,6 @@ extern void disable_timer_nmi_watchdog(v
 extern void enable_timer_nmi_watchdog(void);
 extern int nmi_watchdog_tick (struct pt_regs * regs, unsigned reason);
 
-extern void nmi_watchdog_default(void);
-
 extern atomic_t nmi_active;
 extern unsigned int nmi_watchdog;
 #define NMI_DISABLED    -1
